<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Pandoc on justin.vc</title>
    <link>https://justin.vc/tags/pandoc/</link>
    <description>Recent content in Pandoc on justin.vc</description>
    <image>
      <url>https://justin.vc/</url>
      <link>https://justin.vc/</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 08 Aug 2022 15:30:00 -0400</lastBuildDate><atom:link href="https://justin.vc/tags/pandoc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Brute Forcing Pandoc with Panflute</title>
      <link>https://justin.vc/posts/brute-forcing-pandoc-with-panflute/</link>
      <pubDate>Mon, 08 Aug 2022 15:30:00 -0400</pubDate>
      
      <guid>https://justin.vc/posts/brute-forcing-pandoc-with-panflute/</guid>
      <description>&lt;p&gt;Hello! This is a short post, more of a &amp;ldquo;here&amp;rsquo;s an intersting thing I wandered
into&amp;rdquo; type of post. I originally wrote most of my posts on TiddlyWiki, which is
where &lt;a href=&#34;https://www.zk.justin.vc&#34;&gt;https://www.zk.justin.vc&lt;/a&gt; resides now. I decided to move this site to Hugo
and was pondering: &amp;ldquo;Could I write all my notes in org-mode, and convert them?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;I remembered &lt;a href=&#34;https://pandoc.org&#34;&gt;pandoc&lt;/a&gt; and how simple it was to convert various LaTeX and markdown
files back and forth. The problem was, there&amp;rsquo;s no converter for TiddlyWiki due
to its dynamism. I found a couple Python2 githubs but they seemed a bit out of
date. So I took it on myself to figure out how pandoc filters worked.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Hello! This is a short post, more of a &ldquo;here&rsquo;s an intersting thing I wandered
into&rdquo; type of post. I originally wrote most of my posts on TiddlyWiki, which is
where <a href="https://www.zk.justin.vc">https://www.zk.justin.vc</a> resides now. I decided to move this site to Hugo
and was pondering: &ldquo;Could I write all my notes in org-mode, and convert them?&rdquo;</p>
<p>I remembered <a href="https://pandoc.org">pandoc</a> and how simple it was to convert various LaTeX and markdown
files back and forth. The problem was, there&rsquo;s no converter for TiddlyWiki due
to its dynamism. I found a couple Python2 githubs but they seemed a bit out of
date. So I took it on myself to figure out how pandoc filters worked.</p>
<p>I didn&rsquo;t want to spend -too- much time, so writing Haskell and Lua filters were
out. I&rsquo;d probably seriously consider Lua next time just cause it seems to be a
language that is on the up-and-up, but that&rsquo;s neither here nor there.</p>
<p>Enter <a href="https://github.com/sergiocorreia/panflute">panflute</a>, a pythonic way to write pandoc filters.It&rsquo;s relatively old, but
I didn&rsquo;t have any issues, even on the newest version of pandoc that was released
just a couple days ago (August &lsquo;22).</p>
<p>Essentially you operate on the normal pandoc portions of the AST such as Para /
Header / Strings, and use a filter to change them. My use case was kind of weird
where I wanted to edit the text wholecloth in some cases.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="org-coderef--e1bcfb-1"><a class="lnlinks" href="#org-coderef--e1bcfb-1"> 1</a>
</span><span class="lnt" id="org-coderef--e1bcfb-2"><a class="lnlinks" href="#org-coderef--e1bcfb-2"> 2</a>
</span><span class="lnt" id="org-coderef--e1bcfb-3"><a class="lnlinks" href="#org-coderef--e1bcfb-3"> 3</a>
</span><span class="lnt" id="org-coderef--e1bcfb-4"><a class="lnlinks" href="#org-coderef--e1bcfb-4"> 4</a>
</span><span class="lnt" id="org-coderef--e1bcfb-5"><a class="lnlinks" href="#org-coderef--e1bcfb-5"> 5</a>
</span><span class="lnt" id="org-coderef--e1bcfb-6"><a class="lnlinks" href="#org-coderef--e1bcfb-6"> 6</a>
</span><span class="lnt" id="org-coderef--e1bcfb-7"><a class="lnlinks" href="#org-coderef--e1bcfb-7"> 7</a>
</span><span class="lnt" id="org-coderef--e1bcfb-8"><a class="lnlinks" href="#org-coderef--e1bcfb-8"> 8</a>
</span><span class="lnt" id="org-coderef--e1bcfb-9"><a class="lnlinks" href="#org-coderef--e1bcfb-9"> 9</a>
</span><span class="lnt" id="org-coderef--e1bcfb-10"><a class="lnlinks" href="#org-coderef--e1bcfb-10">10</a>
</span><span class="lnt" id="org-coderef--e1bcfb-11"><a class="lnlinks" href="#org-coderef--e1bcfb-11">11</a>
</span><span class="lnt" id="org-coderef--e1bcfb-12"><a class="lnlinks" href="#org-coderef--e1bcfb-12">12</a>
</span><span class="lnt" id="org-coderef--e1bcfb-13"><a class="lnlinks" href="#org-coderef--e1bcfb-13">13</a>
</span><span class="lnt" id="org-coderef--e1bcfb-14"><a class="lnlinks" href="#org-coderef--e1bcfb-14">14</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">panflute</span> <span class="kn">import</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">increase_header_level</span><span class="p">(</span><span class="n">elem</span><span class="p">,</span> <span class="n">doc</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">elem</span><span class="p">)</span> <span class="o">==</span> <span class="n">Header</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">elem</span><span class="o">.</span><span class="n">level</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">elem</span><span class="o">.</span><span class="n">level</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="p">[]</span> <span class="c1">#                                    (delete action)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">doc</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">run_filter</span><span class="p">(</span><span class="n">increase_header_level</span><span class="p">,</span> <span class="n">doc</span><span class="o">=</span><span class="n">doc</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">main</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>As you can see in the example, it&rsquo;s pretty self-intuitive when you&rsquo;re doing
simple things. This simply looks at each element to see if there&rsquo;s a &ldquo;header&rdquo;,
and adds a level if it&rsquo;s below level 6. If they&rsquo;re level 6, then it deletes them.</p>
<p>I probably could&rsquo;ve just used normal bash tools but I wanted to do everything in
one script. This article will be more of a code-dump with my thought process. I don&rsquo;t
promise it will be pretty but I figured I didn&rsquo;t see many other people doing
this so it&rsquo;s not -completely- useless.</p>
<p>So, text for tiddlywiki tends to be something like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">title: testing test
</span></span><span class="line"><span class="cl">type: text/vnd.tiddlywiki
</span></span><span class="line"><span class="cl">tags: programming org
</span></span><span class="line"><span class="cl">created: 20220805
</span></span><span class="line"><span class="cl">modified: 20220808
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">! Summary
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">This is a test article for pandoc and figure out all the associated classes. [[flow state]] is neat. Beep. Beep.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> * This
</span></span><span class="line"><span class="cl"> * is
</span></span><span class="line"><span class="cl"> * a
</span></span><span class="line"><span class="cl">  * nested
</span></span><span class="line"><span class="cl">  * list
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">!! Other
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Also some other stuff, I guess. Woop. A link to something such as [[julia
</span></span><span class="line"><span class="cl">programming language]]
</span></span></code></pre></div><p>With all the metadata at the top, which was the key difficulty. The second was
that org-roam primarily uses its ids to link. This I can&rsquo;t take the credit for,
I borrowed code from: <a href="https://www.amoradi.org/20210730173543.html">https://www.amoradi.org/20210730173543.html</a>.</p>
<p>The converter for MediaWiki gets you almost all of the way there, excluding the
metadata. It, thankfully, uses the &lsquo;same <code>[[ ]]</code> syntax for links that TiddlyWiki
does.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sqlite3</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">panflute</span> <span class="kn">import</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ORG_ROAM_DB_PATH</span> <span class="o">=</span> <span class="s2">&#34;/home/justin/.org/brain/org-roam.db&#34;</span>
</span></span></code></pre></div><p>The constant for the org-roam db is necessary since I use org-roam, otherwise
unneeded. This only requires panflute as a third party library.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">prepare</span><span class="p">(</span><span class="n">doc</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Gets the title of the document and instantiates the list for appending</span>
</span></span><span class="line"><span class="cl">    <span class="n">doc</span><span class="o">.</span><span class="n">header</span> <span class="o">=</span> <span class="p">[</span><span class="sa">f</span><span class="s2">&#34;title: </span><span class="si">{</span><span class="n">stringify</span><span class="p">(</span><span class="n">doc</span><span class="o">.</span><span class="n">metadata</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">])</span><span class="si">}</span><span class="se">\n</span><span class="s2">type: text/vnd.tiddlywiki</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">]</span>
</span></span></code></pre></div><p>This is where you can set up global variables in the document. I use this to
store text in lists and as the initial part of the metadata, getting the header.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">sanitize_link</span><span class="p">(</span><span class="n">elem</span><span class="p">,</span> <span class="n">doc</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">    Reformats the links so they work in TiddlyWiki, MediaWiki naturally
</span></span></span><span class="line"><span class="cl"><span class="s1">    uses the [[]] syntax so this just does a lookup against the org-roam id
</span></span></span><span class="line"><span class="cl"><span class="s1">    and replace it with the title.
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">file_id</span> <span class="o">=</span> <span class="n">elem</span><span class="o">.</span><span class="n">url</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;:&#34;</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">cur</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cur</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;select id, file, title from nodes where id = &#39;</span><span class="se">\&#34;</span><span class="si">{</span><span class="n">file_id</span><span class="si">}</span><span class="se">\&#34;</span><span class="s2">&#39;;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="n">fetchone</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">file_id</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">file_name</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">data</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">1</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">elem</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="n">file_name</span>
</span></span></code></pre></div><p>As mentioned above, I did borrow the code for this section, and modified it to
my needs (the original author exported to HTML directly). It looks up the
org-roam id: and replaces it with the title, since that&rsquo;s how I store my files
on my zettelkasten.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">metadata_parser</span><span class="p">(</span><span class="n">elem</span><span class="p">,</span> <span class="n">doc</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">    Parses the input element content to format it in
</span></span></span><span class="line"><span class="cl"><span class="s1">    a way that (my) TiddlyWiki understands.
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">    TODO: needs refactoring if it gets more complex
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">block</span> <span class="o">=</span> <span class="n">elem</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># transforming filetags -&gt; tags:</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">elem</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;#+filetags&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">text</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">block</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">6</span><span class="p">:]</span><span class="si">}</span><span class="s2"> </span><span class="si">{</span><span class="n">block</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">,</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># transforming created to: created, and format of YYYYMMDD</span>
</span></span><span class="line"><span class="cl">    <span class="k">elif</span> <span class="n">elem</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;#+created&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">text</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">block</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">2</span><span class="p">:]</span><span class="si">}</span><span class="s2"> </span><span class="si">{</span><span class="n">block</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">:]</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># transforming last_modified to modified, and format of YYYYMMDD</span>
</span></span><span class="line"><span class="cl">    <span class="k">elif</span> <span class="n">elem</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;#+last_modified&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">text</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">block</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="o">-</span><span class="mi">9</span><span class="p">:]</span><span class="si">}</span><span class="s2"> </span><span class="si">{</span><span class="n">block</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">:]</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">text</span> <span class="o">+</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span>
</span></span></code></pre></div><p>This is where things get a bit hairy, I essentially use this to parse the
associated RawBlock for org and return them as vanilla strings. All TiddlyWiki
tiddlers use this metadata. Eventually I&rsquo;d like to add more, things like
reading status and private/public depending on the underlying file. While I&rsquo;m
pretty sure this is not a good way to do it, it works.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">header_parser</span><span class="p">(</span><span class="n">elem</span><span class="p">,</span> <span class="n">doc</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">    TiddlyWiki uses !&#39;s for headers
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">s</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">elem</span><span class="o">.</span><span class="n">level</span> <span class="o">==</span> <span class="n">n</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">s</span> <span class="o">=</span> <span class="s1">&#39;!&#39;</span> <span class="o">*</span> <span class="n">n</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">s</span>
</span></span></code></pre></div><p>Prepending !&rsquo;s to MediaWiki headers, since TiddlyWiki uses ! while MediaWiki
uses =&rsquo;s.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="org-coderef--8846f0-1"><a class="lnlinks" href="#org-coderef--8846f0-1"> 1</a>
</span><span class="lnt" id="org-coderef--8846f0-2"><a class="lnlinks" href="#org-coderef--8846f0-2"> 2</a>
</span><span class="lnt" id="org-coderef--8846f0-3"><a class="lnlinks" href="#org-coderef--8846f0-3"> 3</a>
</span><span class="lnt" id="org-coderef--8846f0-4"><a class="lnlinks" href="#org-coderef--8846f0-4"> 4</a>
</span><span class="lnt" id="org-coderef--8846f0-5"><a class="lnlinks" href="#org-coderef--8846f0-5"> 5</a>
</span><span class="lnt" id="org-coderef--8846f0-6"><a class="lnlinks" href="#org-coderef--8846f0-6"> 6</a>
</span><span class="lnt" id="org-coderef--8846f0-7"><a class="lnlinks" href="#org-coderef--8846f0-7"> 7</a>
</span><span class="lnt" id="org-coderef--8846f0-8"><a class="lnlinks" href="#org-coderef--8846f0-8"> 8</a>
</span><span class="lnt" id="org-coderef--8846f0-9"><a class="lnlinks" href="#org-coderef--8846f0-9"> 9</a>
</span><span class="lnt" id="org-coderef--8846f0-10"><a class="lnlinks" href="#org-coderef--8846f0-10">10</a>
</span><span class="lnt" id="org-coderef--8846f0-11"><a class="lnlinks" href="#org-coderef--8846f0-11">11</a>
</span><span class="lnt" id="org-coderef--8846f0-12"><a class="lnlinks" href="#org-coderef--8846f0-12">12</a>
</span><span class="lnt" id="org-coderef--8846f0-13"><a class="lnlinks" href="#org-coderef--8846f0-13">13</a>
</span><span class="lnt" id="org-coderef--8846f0-14"><a class="lnlinks" href="#org-coderef--8846f0-14">14</a>
</span><span class="lnt" id="org-coderef--8846f0-15"><a class="lnlinks" href="#org-coderef--8846f0-15">15</a>
</span><span class="lnt" id="org-coderef--8846f0-16"><a class="lnlinks" href="#org-coderef--8846f0-16">16</a>
</span><span class="lnt" id="org-coderef--8846f0-17"><a class="lnlinks" href="#org-coderef--8846f0-17">17</a>
</span><span class="lnt" id="org-coderef--8846f0-18"><a class="lnlinks" href="#org-coderef--8846f0-18">18</a>
</span><span class="lnt" id="org-coderef--8846f0-19"><a class="lnlinks" href="#org-coderef--8846f0-19">19</a>
</span><span class="lnt" id="org-coderef--8846f0-20"><a class="lnlinks" href="#org-coderef--8846f0-20">20</a>
</span><span class="lnt" id="org-coderef--8846f0-21"><a class="lnlinks" href="#org-coderef--8846f0-21">21</a>
</span><span class="lnt" id="org-coderef--8846f0-22"><a class="lnlinks" href="#org-coderef--8846f0-22">22</a>
</span><span class="lnt" id="org-coderef--8846f0-23"><a class="lnlinks" href="#org-coderef--8846f0-23">23</a>
</span><span class="lnt" id="org-coderef--8846f0-24"><a class="lnlinks" href="#org-coderef--8846f0-24">24</a>
</span><span class="lnt" id="org-coderef--8846f0-25"><a class="lnlinks" href="#org-coderef--8846f0-25">25</a>
</span><span class="lnt" id="org-coderef--8846f0-26"><a class="lnlinks" href="#org-coderef--8846f0-26">26</a>
</span><span class="lnt" id="org-coderef--8846f0-27"><a class="lnlinks" href="#org-coderef--8846f0-27">27</a>
</span><span class="lnt" id="org-coderef--8846f0-28"><a class="lnlinks" href="#org-coderef--8846f0-28">28</a>
</span><span class="lnt" id="org-coderef--8846f0-29"><a class="lnlinks" href="#org-coderef--8846f0-29">29</a>
</span><span class="lnt" id="org-coderef--8846f0-30"><a class="lnlinks" href="#org-coderef--8846f0-30">30</a>
</span><span class="lnt" id="org-coderef--8846f0-31"><a class="lnlinks" href="#org-coderef--8846f0-31">31</a>
</span><span class="lnt" id="org-coderef--8846f0-32"><a class="lnlinks" href="#org-coderef--8846f0-32">32</a>
</span><span class="lnt" id="org-coderef--8846f0-33"><a class="lnlinks" href="#org-coderef--8846f0-33">33</a>
</span><span class="lnt" id="org-coderef--8846f0-34"><a class="lnlinks" href="#org-coderef--8846f0-34">34</a>
</span><span class="lnt" id="org-coderef--8846f0-35"><a class="lnlinks" href="#org-coderef--8846f0-35">35</a>
</span><span class="lnt" id="org-coderef--8846f0-36"><a class="lnlinks" href="#org-coderef--8846f0-36">36</a>
</span><span class="lnt" id="org-coderef--8846f0-37"><a class="lnlinks" href="#org-coderef--8846f0-37">37</a>
</span><span class="lnt" id="org-coderef--8846f0-38"><a class="lnlinks" href="#org-coderef--8846f0-38">38</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">action</span><span class="p">(</span><span class="n">elem</span><span class="p">,</span> <span class="n">doc</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">elem</span><span class="p">,</span> <span class="n">RawBlock</span><span class="p">)</span> <span class="ow">and</span> <span class="n">elem</span><span class="o">.</span><span class="n">format</span> <span class="o">==</span> <span class="s1">&#39;org&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># Filter for Org Block to reassemble into proper metadata</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># Not a fan of how I did this, but it works</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">elem</span><span class="o">.</span><span class="n">prev</span> <span class="o">==</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">elem</span><span class="o">.</span><span class="n">container</span><span class="p">))):</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">elem</span><span class="o">.</span><span class="n">offset</span><span class="p">(</span><span class="n">i</span><span class="p">),</span> <span class="n">RawBlock</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                        <span class="n">header</span> <span class="o">=</span> <span class="n">metadata_parser</span><span class="p">(</span><span class="n">elem</span><span class="o">.</span><span class="n">offset</span><span class="p">(</span><span class="n">i</span><span class="p">),</span> <span class="n">doc</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                        <span class="n">doc</span><span class="o">.</span><span class="n">header</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">header</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                        <span class="k">break</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">Para</span><span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="n">Str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">doc</span><span class="o">.</span><span class="n">header</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">elem</span><span class="p">,</span> <span class="n">Link</span><span class="p">)</span> <span class="ow">and</span> <span class="n">elem</span><span class="o">.</span><span class="n">url</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s2">&#34;id:&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">sanitize_link</span><span class="p">(</span><span class="n">elem</span><span class="p">,</span> <span class="n">doc</span><span class="p">)</span> <span class="c1">#                                     (sanitize2)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">elem</span><span class="p">,</span> <span class="n">Header</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">level_string</span> <span class="o">=</span> <span class="n">header_parser</span><span class="p">(</span><span class="n">elem</span><span class="p">,</span> <span class="n">doc</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">Para</span><span class="p">(</span><span class="n">RawInline</span><span class="p">(</span><span class="n">level_string</span> <span class="o">+</span> <span class="n">stringify</span><span class="p">(</span><span class="n">elem</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">None</span> <span class="c1">#a none action                                     (none action)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">finalize</span><span class="p">(</span><span class="n">doc</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">pass</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">doc</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">run_filter</span><span class="p">(</span><span class="n">action</span><span class="p">,</span> <span class="n">prepare</span><span class="p">,</span> <span class="n">finalize</span><span class="p">,</span> <span class="n">doc</span><span class="o">=</span><span class="n">doc</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">db</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">ORG_ROAM_DB_PATH</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">main</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>This is the meat n&rsquo; potatos of the code, so to speak. The run_filter takes an
&ldquo;action&rdquo; and goes down the AST provided by pandoc, using the rules associated
with the input/output format and the additional filter.</p>
<p>I basically:</p>
<ul>
<li>Look up the first element, make sure there&rsquo;s nothing behind that, then use
-that- to loop over the entire element container, stopping when there&rsquo;s no more RawBlocks.</li>
<li>I then parse the contents and add it to the header list. This then uses a list
comprehension to toss into a Paragraph using newlines to put them at the top like in the tiddlywiki example.</li>
<li>This then replaces each link type it encounters that starts with id:</li>
<li>Finally, it takes the extraneous header information and prepend&rsquo;s a !
depending on the header level.</li>
</ul>
<p>Most of my time was wasting understanding the Panflute API and how it interacted
with Pandoc. For example, I didn&rsquo;t realize at first to persist the data you
needed to essentially use the prepare functon and the doc class. And you need to
do modify/delete in the action function. (A <a href="#org-coderef--8846f0-26">none action</a> preserves an element and an empty
list [] performs a <a href="#org-coderef--e1bcfb-8">delete action</a>.)</p>
<p>Then we can finally do something like:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pandoc test.org -t mediawiki -f org -F main.py -o test.tid
</span></span></code></pre></div><p>and wrap it in a shell script to work on certain org-files.</p>
<p>I probably made this a bit harder on myself by not simply using the Lua filters,
but it was fun to learn something new and now I can programatically export my
org-roam files to TiddlyWiki. I won&rsquo;t be able to do as much fancy HTML as I&rsquo;d
like without writing more filters, but I figure it&rsquo;s good enough to get me to
start writing more notes.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
