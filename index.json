[{"content":" Update\nAmusingly I wrote this after a small delay in a ublock-origin update made things annoying but it seems like it\u0026rsquo;s relevant again considering their direct video injection (at least as of ~ 13/06 of 24)\nRealized I should probably just do more short-form stream of consciousness posts and things I\u0026rsquo;m tinkering with. This will be my first ox-hugo post of essentially tossing them into one giant .org file. Going to try use this method from now on unless it\u0026rsquo;s like some sort of mega-article.\nBackground Okay, I\u0026rsquo;m sure y\u0026rsquo;all have notice Google/YouTube going full-on war on adblockers recently and while there\u0026rsquo;s options such as simply using another browser (I\u0026rsquo;ve noticed Firefox doesn\u0026rsquo;t get hit as often) I\u0026rsquo;ve decided to use this as an excuse to cut down on video consumption.\nyt-dlp software yt-dlp is a neat fork of youtube-dlp which lets you download directly from youtube (and many other sites). Normally you could use it like thus:\nyt-dlp -f mp4 https://www.youtube.com/watch\\?v\\=jNQXAC9IVRw elfeed If you\u0026rsquo;re familiar with emacs, you\u0026rsquo;re probably familiar with elfeed. The most popular (I think) feed reader for it. In addition to elfeed, I use elfeed-org which allows you to store your feeds in a normal .org file, which makes things a lot less of a hassle. For example, I export my blog roll and use that as a compendium of things to read.\nCombining Elfeed + yt-dlp Okay, so the fun thing is in bash you could proceed to pipe yt-dlp to mpv and essentially just watch youtube in your video player. You can then chain this with elfeed because every youtube channel has an RSS feed behind it.\nFor example this is Xah Lee's Kind of a fun/weird emacs/keyboard streamer. Very \u0026lsquo;un-PC\u0026rsquo; as it were, as a warning. Why did I choose him for the example? Dunno! feed.\nGetting your feed list You can export your youtube data by following the instructions here. This gives you what is essentially a dump of all the channel ids, etc. that you\u0026rsquo;re subscribed to. Then you can bash script / python script, etc. to make it into a list.\nimport pandas as pd # Load the CSV file file_path = \u0026#39;/mnt/data/subscriptions.csv\u0026#39; subscriptions = pd.read_csv(file_path) # Generating RSS links for each channel rss_links = subscriptions[\u0026#39;Channel Id\u0026#39;] \\ .apply(lambda id: f\u0026#34;https://www.youtube.com/feeds/videos.xml?channel_id={id}\u0026#34;) subscriptions[\u0026#39;RSS Link\u0026#39;] = rss_links Importing into emacs You can then use something like org-elfeed to add all your items into a list (using the aforementioned link as an example) or simply ask GPT or another LLM to format it in such a way as needed (you could even use a web-based RSS reader if you don\u0026rsquo;t want to use emacs for some reason):\nVideo :video:noexport: YouTube :youtube: https://www.youtube.com/feeds/videos.xml?channel_id=UCXEJNKH9I4xsoyUNN3IL96A This allows you to have all your subscriptions into your RSS reader. You can then add a command / shortcut into your config that pipes it into mpv as such (for example, in my case the b key would normally open it in a browser but now uses mpv). And adding a tag allows you to search only for videos.\n(defun mpv-play-url (url \u0026amp;rest args) \u0026#34;Play the given URL in MPV.\u0026#34; (interactive) (start-process \u0026#34;my-process\u0026#34; nil \u0026#34;mpv\u0026#34; \u0026#34;--speed=2.0\u0026#34; \u0026#34;--pause\u0026#34; \u0026#34;--cache=yes\u0026#34; \u0026#34;demuxer-max-bytes=5000M\u0026#34; \u0026#34;demuxer-max-back-bytes=3000M\u0026#34; url)) (setq browse-url-handlers \u0026#39;((\u0026#34;youtu\\\\.?be.*\\\\.xml\u0026#34; . browse-url-default-browser) (\u0026#34;youtu\\\\.?be\u0026#34; . mpv-play-url))) Conclusion The only annoyances are that if you\u0026rsquo;re constantly subscribing to new things or watching from the algorithm this isn\u0026rsquo;t a good workflow. I\u0026rsquo;m also sure pinging the RSS constantly isn\u0026rsquo;t great efficiency-wise (the feeds only have the last 15 items although). I, however, only try to check once a day and I tend to watch the same people so I don\u0026rsquo;t waste time. If nothing else this has lessened me mindlessly refreshing by adding a bit of friction.\n","permalink":"https://justin.vc/posts/youtube-elfeed-mpv/","summary":"\u003cdiv class=\"alert-primary alert\"\u003e\n\u003cdiv class=\"alert-heading\"\u003e\n\u003cp\u003eUpdate\u003c/p\u003e\n\u003c/div\u003e\n\u003cp\u003eAmusingly I wrote this after a small delay in a ublock-origin update made things\nannoying but it seems like it\u0026rsquo;s relevant again considering their direct video\ninjection (at least as of ~ 13/06 of 24)\u003c/p\u003e\n\u003c/div\u003e\n\u003cp\u003eRealized I should probably just do more short-form stream of consciousness posts\nand things I\u0026rsquo;m tinkering with. This will be my first ox-hugo post of essentially\ntossing them into one giant .org file. Going to try use this method from now on\nunless it\u0026rsquo;s like some sort of mega-article.\u003c/p\u003e","title":"YouTube \u0026 elfeed"},{"content":"So, I\u0026rsquo;ve been trying to shuffle back into using emacs for more things. This week specifically I was looking to wean myself off todoist and get back into using org-mode for tasks/todo\u0026rsquo;s, etc. I remembered finding a blog post by \u0026ldquo;but she\u0026rsquo;s a girl\u0026hellip;\u0026rdquo; on her setup, relevant part repeated here for clarity:\n(def-package! org-super-agenda :after org-agenda :init (setq org-agenda-skip-scheduled-if-done t org-agenda-skip-deadline-if-done t org-agenda-include-deadlines t org-agenda-block-separator nil org-agenda-compact-blocks t org-agenda-start-day nil ;; i.e. today org-agenda-span 1 org-agenda-start-on-weekday nil) (setq org-agenda-custom-commands \u0026#39;((\u0026#34;c\u0026#34; \u0026#34;Super view\u0026#34; ... :config (org-super-agenda-mode)) I thought, \u0026ldquo;oh, swell\u0026rdquo; someone else made a easy config that\u0026rsquo;s nicer than the one in the project github, this will be useful!\nNow, notice the \u0026ldquo;org-agenda-start-day\u0026rdquo; set to nil, which defaults the \u0026ldquo;view\u0026rdquo; to the current date. I encountered a weird problem where \u0026ldquo;org-agenda-start-day\u0026rdquo; seemed to default to \u0026ldquo;-3d\u0026rdquo;, which, in effect would cause org-super-agenda to show the wrong date (three days before). No matter what I did it seemed to default back, which set me on a bit of a \u0026ldquo;I will figure this out out of spite!\u0026rdquo; path. I spent an hour randomly looking through my own literate config and config.el, nothing seemed to work except for manually running the block which would set things correctly until I next restarted the emacs server / client.\nI ended up getting annoyed and asking for help on Mastodon I joined this particular instance cause it seemed pretty open, without mass fediblocking and such. (https://emacs.ch). where a helpful person by the name of Sylvain Soliman (@soliman@pouet.chapril.org) pointed me in the direction of Doom\u0026rsquo;s +org-init-agenda-h, located at /modules/lang/org/config.el - apparently doom\u0026rsquo;s org setup would overwrite it and, if you were blindly following instructions from someone else\u0026rsquo;s setup, would never notice it.\nReally, this was all just a round about way me saying, if you\u0026rsquo;re new to doom / emacs / or you\u0026rsquo;re just forgetful like I am, and something weird seems to be going on, make sure to check what doom is setting in the background.\nTLDR: Everything worked out when changing the after! to org instead of org-agenda. Check the doom configs if something weird is going on and try user after! org instead of the specific package to see if that changes anything.\n","permalink":"https://justin.vc/posts/reminder-check-doom-defaults-agenda/","summary":"\u003cp\u003eSo, I\u0026rsquo;ve been trying to shuffle back into using emacs for more things. This week\nspecifically I was looking to wean myself off todoist and get back into using\norg-mode for tasks/todo\u0026rsquo;s, etc. I remembered finding a blog post by \u003ca href=\"https://www.rousette.org.uk/archives/doom-emacs-tweaks-org-journal-and-org-super-agenda/\"\u003e\u0026ldquo;but she\u0026rsquo;s a\ngirl\u0026hellip;\u0026rdquo;\u003c/a\u003e on her setup, relevant part repeated here for clarity:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-elisp\" data-lang=\"elisp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003edef-package!\u003c/span\u003e \u003cspan class=\"nv\"\u003eorg-super-agenda\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nb\"\u003e:after\u003c/span\u003e \u003cspan class=\"nv\"\u003eorg-agenda\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nb\"\u003e:init\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003esetq\u003c/span\u003e \u003cspan class=\"nv\"\u003eorg-agenda-skip-scheduled-if-done\u003c/span\u003e \u003cspan class=\"no\"\u003et\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nv\"\u003eorg-agenda-skip-deadline-if-done\u003c/span\u003e \u003cspan class=\"no\"\u003et\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nv\"\u003eorg-agenda-include-deadlines\u003c/span\u003e \u003cspan class=\"no\"\u003et\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nv\"\u003eorg-agenda-block-separator\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nv\"\u003eorg-agenda-compact-blocks\u003c/span\u003e \u003cspan class=\"no\"\u003et\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nv\"\u003eorg-agenda-start-day\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e \u003cspan class=\"c1\"\u003e;; i.e. today\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nv\"\u003eorg-agenda-span\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nv\"\u003eorg-agenda-start-on-weekday\u003c/span\u003e \u003cspan class=\"no\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003esetq\u003c/span\u003e \u003cspan class=\"nv\"\u003eorg-agenda-custom-commands\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"o\"\u003e\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;c\u0026#34;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Super view\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e           \u003cspan class=\"o\"\u003e...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nb\"\u003e:config\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003eorg-super-agenda-mode\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI thought, \u0026ldquo;oh, swell\u0026rdquo; someone else made a easy config that\u0026rsquo;s nicer than the one\nin the project github, this will be useful!\u003c/p\u003e","title":"A Reminder to Check on Doom Defaults: Org-Agenda"},{"content":"This is a now page, a page that I update every so often to let you know what I\u0026rsquo;m up to. It\u0026rsquo;s inspired by Derek Sivers\u0026rsquo; now page. Incidentally, there\u0026rsquo;s some overlap with my .plan file, and I\u0026rsquo;m pondering how to reconcile it all. I still like this for keeping up with my reading/watching, etc. etc.\nReading I try to do most of my tracking on goodreads. I know, evil Amazon, but the API is pretty good. I try to backup my data but I\u0026rsquo;m not sure what other good alternatives are. Feel free to suggest some.\nWatching I last watched (show/movie respectively) via Trakt.tv:\nI use anilist for tracking anime/manga. I know there\u0026rsquo;s a debate on MAL vs. AL, but I like the interface and the GraphQL is nice once you get used to it. (read: salty that brickfrog was taken on MAL)\nListening I don\u0026rsquo;t listen to a lot of music, feel free to check my recently played tracks on last.fm. The embed is a spotify playlist that I\u0026rsquo;ve been listening to recently on spotify:\nrateyourmusic.com - I don\u0026rsquo;t use this much, but I do use it to track my music collection. I\u0026rsquo;m not sure if I\u0026rsquo;ll keep it up, but I do like the idea of having a collection of music I\u0026rsquo;ve listened to. ","permalink":"https://justin.vc/now/","summary":"\u003cp\u003eThis is a now page, a page that I update every so often to let you know what I\u0026rsquo;m up to. It\u0026rsquo;s inspired by Derek Sivers\u0026rsquo; \u003ca href=\"https://sive.rs/nowff\"\u003enow page\u003c/a\u003e. Incidentally, there\u0026rsquo;s some overlap with my .plan file, and I\u0026rsquo;m pondering how to reconcile it all. I still like this for keeping up with my reading/watching, etc. etc.\u003c/p\u003e\n\u003ch2 id=\"reading\"\u003eReading\u003c/h2\u003e\n\u003cp\u003eI try to do most of my tracking on \u003ca href=\"https://www.goodreads.com/brickfrog\"\u003egoodreads\u003c/a\u003e. I know, evil Amazon, but the API is pretty good. I try to backup my data but I\u0026rsquo;m not sure what other good alternatives are. Feel free to suggest some.\u003c/p\u003e","title":"Now"},{"content":"Hello! This is a short post, more of a \u0026ldquo;here\u0026rsquo;s an intersting thing I wandered into\u0026rdquo; type of post. I originally wrote most of my posts on TiddlyWiki, which is where https://www.zk.justin.vc resides now. I decided to move this site to Hugo and was pondering: \u0026ldquo;Could I write all my notes in org-mode, and convert them?\u0026rdquo;\nI remembered pandoc and how simple it was to convert various LaTeX and markdown files back and forth. The problem was, there\u0026rsquo;s no converter for TiddlyWiki due to its dynamism. I found a couple Python2 githubs but they seemed a bit out of date. So I took it on myself to figure out how pandoc filters worked.\nI didn\u0026rsquo;t want to spend -too- much time, so writing Haskell and Lua filters were out. I\u0026rsquo;d probably seriously consider Lua next time just cause it seems to be a language that is on the up-and-up, but that\u0026rsquo;s neither here nor there.\nEnter panflute, a pythonic way to write pandoc filters.It\u0026rsquo;s relatively old, but I didn\u0026rsquo;t have any issues, even on the newest version of pandoc that was released just a couple days ago (August \u0026lsquo;22).\nEssentially you operate on the normal pandoc portions of the AST such as Para / Header / Strings, and use a filter to change them. My use case was kind of weird where I wanted to edit the text wholecloth in some cases.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 from panflute import * def increase_header_level(elem, doc): if type(elem) == Header: if elem.level \u0026lt; 6: elem.level += 1 else: return [] # (delete action) def main(doc=None): return run_filter(increase_header_level, doc=doc) if __name__ == \u0026#34;__main__\u0026#34;: main() As you can see in the example, it\u0026rsquo;s pretty self-intuitive when you\u0026rsquo;re doing simple things. This simply looks at each element to see if there\u0026rsquo;s a \u0026ldquo;header\u0026rdquo;, and adds a level if it\u0026rsquo;s below level 6. If they\u0026rsquo;re level 6, then it deletes them.\nI probably could\u0026rsquo;ve just used normal bash tools but I wanted to do everything in one script. This article will be more of a code-dump with my thought process. I don\u0026rsquo;t promise it will be pretty but I figured I didn\u0026rsquo;t see many other people doing this so it\u0026rsquo;s not -completely- useless.\nSo, text for tiddlywiki tends to be something like this:\ntitle: testing test type: text/vnd.tiddlywiki tags: programming org created: 20220805 modified: 20220808 ! Summary This is a test article for pandoc and figure out all the associated classes. [[flow state]] is neat. Beep. Beep. * This * is * a * nested * list !! Other Also some other stuff, I guess. Woop. A link to something such as [[julia programming language]] With all the metadata at the top, which was the key difficulty. The second was that org-roam primarily uses its ids to link. This I can\u0026rsquo;t take the credit for, I borrowed code from: https://www.amoradi.org/20210730173543.html.\nThe converter for MediaWiki gets you almost all of the way there, excluding the metadata. It, thankfully, uses the \u0026lsquo;same [[ ]] syntax for links that TiddlyWiki does.\nimport sqlite3 import os from panflute import * ORG_ROAM_DB_PATH = \u0026#34;/home/justin/.org/brain/org-roam.db\u0026#34; The constant for the org-roam db is necessary since I use org-roam, otherwise unneeded. This only requires panflute as a third party library.\ndef prepare(doc): # Gets the title of the document and instantiates the list for appending doc.header = [f\u0026#34;title: {stringify(doc.metadata[\u0026#39;title\u0026#39;])}\\ntype: text/vnd.tiddlywiki\\n\u0026#34;] This is where you can set up global variables in the document. I use this to store text in lists and as the initial part of the metadata, getting the header.\ndef sanitize_link(elem, doc): \u0026#39;\u0026#39;\u0026#39; Reformats the links so they work in TiddlyWiki, MediaWiki naturally uses the [[]] syntax so this just does a lookup against the org-roam id and replace it with the title. \u0026#39;\u0026#39;\u0026#39; file_id = elem.url.split(\u0026#34;:\u0026#34;)[1] cur = db.cursor() cur.execute(f\u0026#34;select id, file, title from nodes where id = \u0026#39;\\\u0026#34;{file_id}\\\u0026#34;\u0026#39;;\u0026#34;) data = cur.fetchone() file_id = data[0][1:-1] file_name = f\u0026#34;{data[2][1:-1]}\u0026#34; elem.url = file_name As mentioned above, I did borrow the code for this section, and modified it to my needs (the original author exported to HTML directly). It looks up the org-roam id: and replaces it with the title, since that\u0026rsquo;s how I store my files on my zettelkasten.\ndef metadata_parser(elem, doc): \u0026#39;\u0026#39;\u0026#39; Parses the input element content to format it in a way that (my) TiddlyWiki understands. TODO: needs refactoring if it gets more complex \u0026#39;\u0026#39;\u0026#39; block = elem.text.split() # transforming filetags -\u0026gt; tags: if elem.text.startswith(\u0026#39;#+filetags\u0026#39;): text = f\u0026#34;{block[0][6:]} {block[1][1:-1].replace(\u0026#39;:\u0026#39;,\u0026#39; \u0026#39;)}\u0026#34; # transforming created to: created, and format of YYYYMMDD elif elem.text.startswith(\u0026#39;#+created\u0026#39;): text = f\u0026#34;{block[0][2:]} {block[1][1:].replace(\u0026#39;-\u0026#39;,\u0026#39;\u0026#39;)}\u0026#34; # transforming last_modified to modified, and format of YYYYMMDD elif elem.text.startswith(\u0026#39;#+last_modified\u0026#39;): text = f\u0026#34;{block[0][-9:]} {block[1][1:].replace(\u0026#39;-\u0026#39;,\u0026#39;\u0026#39;)}\u0026#34; else: return None return text + \u0026#39;\\n\u0026#39; This is where things get a bit hairy, I essentially use this to parse the associated RawBlock for org and return them as vanilla strings. All TiddlyWiki tiddlers use this metadata. Eventually I\u0026rsquo;d like to add more, things like reading status and private/public depending on the underlying file. While I\u0026rsquo;m pretty sure this is not a good way to do it, it works.\ndef header_parser(elem, doc): \u0026#39;\u0026#39;\u0026#39; TiddlyWiki uses !\u0026#39;s for headers \u0026#39;\u0026#39;\u0026#39; s = \u0026#39;\u0026#39; for n in range(1,4): if elem.level == n: s = \u0026#39;!\u0026#39; * n + \u0026#39; \u0026#39; return s Prepending !\u0026rsquo;s to MediaWiki headers, since TiddlyWiki uses ! while MediaWiki uses =\u0026rsquo;s.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 def action(elem, doc): if isinstance(elem, RawBlock) and elem.format == \u0026#39;org\u0026#39;: # Filter for Org Block to reassemble into proper metadata # Not a fan of how I did this, but it works if elem.prev == None: for i in range(len(list(elem.container))): if isinstance(elem.offset(i), RawBlock): header = metadata_parser(elem.offset(i), doc) doc.header.append(header) else: break return Para(*[Str(i) for i in doc.header]) else: return [] elif isinstance(elem, Link) and elem.url.startswith(\u0026#34;id:\u0026#34;): sanitize_link(elem, doc) # (sanitize2) elif isinstance(elem, Header): level_string = header_parser(elem, doc) return Para(RawInline(level_string + stringify(elem))) else: return None #a none action (none action) def finalize(doc): pass def main(doc=None): return run_filter(action, prepare, finalize, doc=doc) if __name__ == \u0026#34;__main__\u0026#34;: db = sqlite3.connect(os.path.abspath(ORG_ROAM_DB_PATH)) main() This is the meat n\u0026rsquo; potatos of the code, so to speak. The run_filter takes an \u0026ldquo;action\u0026rdquo; and goes down the AST provided by pandoc, using the rules associated with the input/output format and the additional filter.\nI basically:\nLook up the first element, make sure there\u0026rsquo;s nothing behind that, then use -that- to loop over the entire element container, stopping when there\u0026rsquo;s no more RawBlocks. I then parse the contents and add it to the header list. This then uses a list comprehension to toss into a Paragraph using newlines to put them at the top like in the tiddlywiki example. This then replaces each link type it encounters that starts with id: Finally, it takes the extraneous header information and prepend\u0026rsquo;s a ! depending on the header level. Most of my time was wasting understanding the Panflute API and how it interacted with Pandoc. For example, I didn\u0026rsquo;t realize at first to persist the data you needed to essentially use the prepare functon and the doc class. And you need to do modify/delete in the action function. (A none action preserves an element and an empty list [] performs a delete action.)\nThen we can finally do something like:\npandoc test.org -t mediawiki -f org -F main.py -o test.tid and wrap it in a shell script to work on certain org-files.\nI probably made this a bit harder on myself by not simply using the Lua filters, but it was fun to learn something new and now I can programatically export my org-roam files to TiddlyWiki. I won\u0026rsquo;t be able to do as much fancy HTML as I\u0026rsquo;d like without writing more filters, but I figure it\u0026rsquo;s good enough to get me to start writing more notes.\n","permalink":"https://justin.vc/posts/brute-forcing-pandoc-with-panflute/","summary":"\u003cp\u003eHello! This is a short post, more of a \u0026ldquo;here\u0026rsquo;s an intersting thing I wandered\ninto\u0026rdquo; type of post. I originally wrote most of my posts on TiddlyWiki, which is\nwhere \u003ca href=\"https://www.zk.justin.vc\"\u003ehttps://www.zk.justin.vc\u003c/a\u003e resides now. I decided to move this site to Hugo\nand was pondering: \u0026ldquo;Could I write all my notes in org-mode, and convert them?\u0026rdquo;\u003c/p\u003e\n\u003cp\u003eI remembered \u003ca href=\"https://pandoc.org\"\u003epandoc\u003c/a\u003e and how simple it was to convert various LaTeX and markdown\nfiles back and forth. The problem was, there\u0026rsquo;s no converter for TiddlyWiki due\nto its dynamism. I found a couple Python2 githubs but they seemed a bit out of\ndate. So I took it on myself to figure out how pandoc filters worked.\u003c/p\u003e","title":"Brute Forcing Pandoc with Panflute"},{"content":"Summary This is both a general(ish) explainer and template(s) for usage in data science, specifically utilizing (formerly) Quantum Black\u0026rsquo;s now open-source (Linux Foundation) framework for creating reproducible, maintainable, and modular data science code. What does that mean? At its most simple it basically ties things into \u0026quot;nodes\u0026quot; and \u0026quot;pipelines\u0026quot;, where nodes are utility functions and functions that tie things together, and pipelines chain together multiple nodes, allowing for steps to be easily repeated. DAGs, they\u0026rsquo;re all the rage. Make sure to read their tutorial if you\u0026rsquo;re not familiar with it, it\u0026rsquo;s good (and I won\u0026rsquo;t be covering nearly as much as there, it\u0026rsquo;s under the assumption you\u0026rsquo;ve skimmed it):\nhttps://kedro.readthedocs.io/en/stable/tutorial/spaceflights_tutorial.html\nSome benefits you get using it with org-mode and emacs, however:\nSingle file navigation / no need-to bounce around VSCode haphazardly when you can jump between headers and tangle to the appropriate places. Transition to a presentation from inside Org-mode seamlessly Include data exploration and other documentation in the same file. Other languages with org-babel Kedro uses a specific workflow which I will follow for this template/tutorial.\nI\u0026rsquo;m not entirely sure how useful this will be, but it allows me to get some practice with org-babel and a project excuse to tinker around with kedro some more in a use-case that I haven\u0026rsquo;t seen.\nThis will be more of a \u0026ldquo;update as I come up with new ideas\u0026rdquo; type of article, and, of course, if you see something that would be better served by a different method, feel free to leave a comment / issue.\nHighlevel / TLDR: This is for using org to config Kedro. Similar to using a monolithic org file for configing emacs. Geared towards people who already use emacs and use something like ivy/helm/vertico to traverse headings easily.\nAssumptions I\u0026rsquo;m using conda for environment management (conda.el / jupyter-python) You\u0026rsquo;ve created the kedro project already since there\u0026rsquo;s the y/n steps insofar as telemetry, etc. TODO: maybe put the steps here? Probably not worth the timesink insofar as a template. The steps would 95% of the time be done in the command line but once. Kedro Spaceflights Tutorial Scenario: It is 2160 and the space tourism industry is booming. Globally, thousands of space shuttle companies take tourists to the Moon and back. You have been able to source amenities offered in each space shuttle, customer reviews and company information.\nProject: You want to construct a model that predicts the price for each trip to the Moon and the corresponding return flight.\nSetup This is for environment setup, utility functions that you might not necessarily want to put in your init.el or other things not directly related to the core of the project.\nEmacs and Shell Elisp\nCommands and utility functions that help reduce repeated code and make the process more seamless. Run manually with C-c C-c. One could alternatively add this to their init.el.\nThe following code is used to prevent org-mode from complaining about the variables. Otherwise you can set these as local variables in a real-life scenario.\n(setq projdir \u0026#34;~/code/literate-kedro\u0026#34;) (setq projsub \u0026#34;/src/literate_kedro\u0026#34;) (print projdir) Shell / Other\nIf you plan on using the terminal for all shell commands, this isn\u0026rsquo;t necessary. You can simply activate your conda environment with conda-env-activate under the assumption you\u0026rsquo;re using conda.el. Because the session is set at the top level, it should persist through the following commands. See the echo commands below confirming.\nconda activate kedro-example Making sure I\u0026rsquo;m in the correct directory / using the correct environment.\necho $(pwd) echo $(which pip) requirements.txt The requirements for the kedro project in the form of a\nblack~=22.0 flake8\u0026gt;=3.7.9, \u0026lt;4.0 ipython\u0026gt;=7.31.1, \u0026lt;8.0 isort~=5.0 jupyter~=1.0 jupyterlab~=3.0 kedro[pandas.CSVDataSet, pandas.ExcelDataSet, pandas.ParquetDataSet, plotly.PlotlyDataSet, plotly.JSONDataSet]==0.18.2 kedro-telemetry~=0.2.0 kedro-viz~=4.7 nbstripout~=0.4 pytest-cov~=3.0 pytest-mock\u0026gt;=1.7.1, \u0026lt;2.0 pytest~=6.2 scikit-learn~=1.0 Configuration The conf folder in kedro is for:\nLogging Credentials Other Sensitive/Personal content TODO: These are things that generally I would be more comfortable configuring outside of org. You could probably get fancy with piping things with keys back and forth but that remains outside of my scope for now.\nYou could probably get away with safely configing your logging here without needing anything fancy.\ndata_science.yml\ndata_science: active_modelling_pipeline: model_options: test_size: 0.2 random_state: 3 features: - engines - passenger_capacity - crew - d_check_complete - moon_clearance_complete - iata_approved - company_rating - review_scores_rating candidate_modelling_pipeline: model_options: test_size: 0.2 random_state: 8 features: - engines - passenger_capacity - crew - review_scores_rating data_processing.companies_columns: type: tracking.JSONDataSet filepath: data/09_tracking/companies_columns.json data_science.active_modelling_pipeline.metrics: type: tracking.MetricsDataSet filepath: data/09_tracking/metrics.json settings.py\nNormally you don\u0026rsquo;t edit this, but there\u0026rsquo;s some cases where it\u0026rsquo;s necessary. This is for storing metrics in a sqlite database.\nfrom kedro_viz.integrations.kedro.sqlite_store import SQLiteStore from pathlib import Path SESSION_STORE_CLASS = SQLiteStore SESSION_STORE_ARGS = {\u0026#34;path\u0026#34;: str(Path(__file__).parents[2] / \u0026#34;data\u0026#34;)} Data The second part of the kedro workflow is the data phase, which involves adding data to the data folder, and then referencing the datasets for the project in the conf/base/catalog.yml file.\nPreparation Steps involved in acquiring / registering the data to the appropriate catalog(s). You could explain the business case or variables also.\nAcquisition\nIn some cases data is easily acquired with a curl/wget, specifically forone-off analyses. It can also be helpful to show where you downloaded your data.\nmkdir -p $directory/ #reviews curl -o \u0026#34;$directory/reviews.csv\u0026#34; https://kedro-org.github.io/kedro/reviews.csv # companies curl -o \u0026#34;$directory/companies.csv\u0026#34; https://kedro-org.github.io/kedro/companies.csv # shuttles curl -o \u0026#34;$directory/shuttles.xlsx\u0026#34; https://kedro-org.github.io/kedro/shuttles.xlsx Data Registration\ncatalog.yml\nYou now need to register the datasets so they can be loaded by Kedro. All Kedro projects have a conf/base/catalog.yml. file.\ncompanies: type: pandas.CSVDataSet filepath: data/01_raw/companies.csv layer: raw reviews: type: pandas.CSVDataSet filepath: data/01_raw/reviews.csv layer: raw shuttles: type: pandas.ExcelDataSet filepath: data/01_raw/shuttles.xlsx layer: raw data_processing.preprocessed_companies: type: pandas.ParquetDataSet filepath: data/02_intermediate/preprocessed_companies.pq layer: intermediate data_processing.preprocessed_shuttles: type: pandas.ParquetDataSet filepath: data/02_intermediate/preprocessed_shuttles.pq layer: intermediate model_input_table: type: pandas.ParquetDataSet filepath: data/03_primary/model_input_table.pq layer: primary data_science.active_modelling_pipeline.regressor: type: pickle.PickleDataSet filepath: data/06_models/regressor_active.pickle versioned: true layer: models data_science.candidate_modelling_pipeline.regressor: type: pickle.PickleDataSet filepath: data/06_models/regressor_candidate.pickle versioned: true layer: models data_science.active_modelling_pipeline.metrics: type: tracking.MetricsDataSet filepath: data/09_tracking/metrics.json data_processing.companies_columns: type: tracking.JSONDataSet filepath: data/09_tracking/companies_columns.json Pipelines These are the node functions associated with the data_processing pipeline.\nIn many typical Kedro projects, a single (“main”) pipeline increases in complexity as the project evolves. To keep your project fit for purpose, you can create modular pipelines, which are logically isolated and can be reused. Modular pipelines are easier to develop, test and maintain, and are portable so they can be copied and reused between projects.\ndata_processing\nThis pipeline is for processing the data.\nnodes.py\nA Kedro node is a wrapper for a Python function that names the inputs and outputs of that function. It is the building block of a pipeline. Nodes can be linked when the output of one node is the input of another.\nNOTE: Could theoretically break this into seperate codeblocks (import, utility, preprocess, but might be a bit cumbersome. Input welcome for best practices.)\nfrom typing import Tuple, Dict import pandas as pd def _is_true(x: pd.Series) -\u0026gt; pd.Series: return x == \u0026#34;t\u0026#34; def _parse_percentage(x: pd.Series) -\u0026gt; pd.Series: x = x.str.replace(\u0026#34;%\u0026#34;, \u0026#34;\u0026#34;) x = x.astype(float) / 100 return x def _parse_money(x: pd.Series) -\u0026gt; pd.Series: x = x.str.replace(\u0026#34;$\u0026#34;, \u0026#34;\u0026#34;).str.replace(\u0026#34;,\u0026#34;, \u0026#34;\u0026#34;) x = x.astype(float) return x def preprocess_companies(companies: pd.DataFrame) -\u0026gt; Tuple[pd.DataFrame, Dict]: \u0026#34;\u0026#34;\u0026#34;Preprocesses the data for companies. Args: companies: Raw data. Returns: Preprocessed data, with `company_rating` converted to a float and `iata_approved` converted to boolean. \u0026#34;\u0026#34;\u0026#34; companies[\u0026#34;iata_approved\u0026#34;] = _is_true(companies[\u0026#34;iata_approved\u0026#34;]) companies[\u0026#34;company_rating\u0026#34;] = _parse_percentage(companies[\u0026#34;company_rating\u0026#34;]) return companies, {\u0026#34;columns\u0026#34;: companies.columns.tolist(), \u0026#34;data_type\u0026#34;: \u0026#34;companies\u0026#34;} def preprocess_shuttles(shuttles: pd.DataFrame) -\u0026gt; pd.DataFrame: \u0026#34;\u0026#34;\u0026#34;Preprocesses the data for shuttles. Args: shuttles: Raw data. Returns: Preprocessed data, with `price` converted to a float and `d_check_complete`, `moon_clearance_complete` converted to boolean. \u0026#34;\u0026#34;\u0026#34; shuttles[\u0026#34;d_check_complete\u0026#34;] = _is_true(shuttles[\u0026#34;d_check_complete\u0026#34;]) shuttles[\u0026#34;moon_clearance_complete\u0026#34;] = _is_true(shuttles[\u0026#34;moon_clearance_complete\u0026#34;]) shuttles[\u0026#34;price\u0026#34;] = _parse_money(shuttles[\u0026#34;price\u0026#34;]) return shuttles def create_model_input_table( shuttles: pd.DataFrame, companies: pd.DataFrame, reviews: pd.DataFrame ) -\u0026gt; pd.DataFrame: \u0026#34;\u0026#34;\u0026#34;Combines all data to create a model input table. Args: shuttles: Preprocessed data for shuttles. companies: Preprocessed data for companies. reviews: Raw data for reviews. Returns: model input table. \u0026#34;\u0026#34;\u0026#34; rated_shuttles = shuttles.merge(reviews, left_on=\u0026#34;id\u0026#34;, right_on=\u0026#34;shuttle_id\u0026#34;) model_input_table = rated_shuttles.merge( companies, left_on=\u0026#34;company_id\u0026#34;, right_on=\u0026#34;id\u0026#34; ) model_input_table = model_input_table.dropna() return model_input_table pipeline.py\nA Kedro pipeline organises the dependencies and execution order of a collection of nodes, and connects inputs and outputs. The pipeline determines the node execution order by resolving dependencies.\nfrom kedro.pipeline import Pipeline, node from kedro.pipeline.modular_pipeline import pipeline from .nodes import ( preprocess_companies, preprocess_shuttles, create_model_input_table, ) def create_pipeline(**kwargs) -\u0026gt; Pipeline: return pipeline( [ node( func=preprocess_companies, inputs=\u0026#34;companies\u0026#34;, outputs=[\u0026#34;preprocessed_companies\u0026#34;,\u0026#34;companies_columns\u0026#34;], name=\u0026#34;preprocess_companies_node\u0026#34;, ), node( func=preprocess_shuttles, inputs=\u0026#34;shuttles\u0026#34;, outputs=\u0026#34;preprocessed_shuttles\u0026#34;, name=\u0026#34;preprocess_shuttles_node\u0026#34;, ), node( func=create_model_input_table, inputs=[\u0026#34;preprocessed_shuttles\u0026#34;, \u0026#34;preprocessed_companies\u0026#34;, \u0026#34;reviews\u0026#34;], outputs=\u0026#34;model_input_table\u0026#34;, name=\u0026#34;create_model_input_table_node\u0026#34;, ), ], namespace=\u0026#34;data_processing\u0026#34;, inputs=[\u0026#34;companies\u0026#34;, \u0026#34;shuttles\u0026#34;, \u0026#34;reviews\u0026#34;], outputs=\u0026#34;model_input_table\u0026#34;, ) data_science\nThis pipeline is for performing data science on the data previously processed.\nnodes.py\nimport logging from typing import Dict, Tuple import pandas as pd from sklearn.linear_model import LinearRegression from sklearn.metrics import r2_score, mean_absolute_error, max_error from sklearn.model_selection import train_test_split def split_data(data: pd.DataFrame, parameters: Dict) -\u0026gt; Tuple: \u0026#34;\u0026#34;\u0026#34;Splits data into features and targets training and test sets. Args: data: Data containing features and target. parameters: Parameters defined in parameters/data_science.yml. Returns: Split data. \u0026#34;\u0026#34;\u0026#34; X = data[parameters[\u0026#34;features\u0026#34;]] y = data[\u0026#34;price\u0026#34;] X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=parameters[\u0026#34;test_size\u0026#34;], random_state=parameters[\u0026#34;random_state\u0026#34;] ) return X_train, X_test, y_train, y_test def train_model(X_train: pd.DataFrame, y_train: pd.Series) -\u0026gt; LinearRegression: \u0026#34;\u0026#34;\u0026#34;Trains the linear regression model. Args: X_train: Training data of independent features. y_train: Training data for price. Returns: Trained model. \u0026#34;\u0026#34;\u0026#34; regressor = LinearRegression() regressor.fit(X_train, y_train) return regressor def evaluate_model( regressor: LinearRegression, X_test: pd.DataFrame, y_test: pd.Series ) -\u0026gt; Dict[str, float]: \u0026#34;\u0026#34;\u0026#34;Calculates and logs the coefficient of determination. Args: regressor: Trained model. X_test: Testing data of independent features. y_test: Testing data for price. \u0026#34;\u0026#34;\u0026#34; y_pred = regressor.predict(X_test) score = r2_score(y_test, y_pred) mae = mean_absolute_error(y_test, y_pred) me = max_error(y_test, y_pred) logger = logging.getLogger(__name__) logger.info(\u0026#34;Model has a coefficient R^2 of %.3f on test data.\u0026#34;, score) return {\u0026#34;r2_score\u0026#34;: score, \u0026#34;mae\u0026#34;: mae, \u0026#34;max_error\u0026#34;: me} pipeline.py\nfrom kedro.pipeline import Pipeline, node from kedro.pipeline.modular_pipeline import pipeline from .nodes import evaluate_model, split_data, train_model def create_pipeline(**kwargs) -\u0026gt; Pipeline: pipeline_instance = pipeline( [ node( func=split_data, inputs=[\u0026#34;model_input_table\u0026#34;, \u0026#34;params:model_options\u0026#34;], outputs=[\u0026#34;X_train\u0026#34;, \u0026#34;X_test\u0026#34;, \u0026#34;y_train\u0026#34;, \u0026#34;y_test\u0026#34;], name=\u0026#34;split_data_node\u0026#34;, ), node( func=train_model, inputs=[\u0026#34;X_train\u0026#34;, \u0026#34;y_train\u0026#34;], outputs=\u0026#34;regressor\u0026#34;, name=\u0026#34;train_model_node\u0026#34;, ), node( func=evaluate_model, inputs=[\u0026#34;regressor\u0026#34;, \u0026#34;X_test\u0026#34;, \u0026#34;y_test\u0026#34;], outputs=\u0026#34;metrics\u0026#34;, name=\u0026#34;evaluate_model_node\u0026#34;, ), ] ) ds_pipeline_1 = pipeline( pipe=pipeline_instance, inputs=\u0026#34;model_input_table\u0026#34;, namespace=\u0026#34;active_modelling_pipeline\u0026#34;, ) ds_pipeline_2 = pipeline( pipe=pipeline_instance, inputs=\u0026#34;model_input_table\u0026#34;, namespace=\u0026#34;candidate_modelling_pipeline\u0026#34;, ) return pipeline( pipe=ds_pipeline_1 + ds_pipeline_2, inputs=\u0026#34;model_input_table\u0026#34;, namespace=\u0026#34;data_science\u0026#34;, ) pipeline_registry.py\nThis is the pipeline registry, where you add the appropriate pipelines defined further down into the register function. This is how kedro recognizes which pipelines to run.\nfrom typing import Dict from kedro.pipeline import Pipeline from literate_kedro.pipelines import data_processing as dp from literate_kedro.pipelines import data_science as ds def register_pipelines() -\u0026gt; Dict[str, Pipeline]: \u0026#34;\u0026#34;\u0026#34;Register the project\u0026#39;s pipelines. Returns: A mapping from a pipeline name to a ``Pipeline`` object. \u0026#34;\u0026#34;\u0026#34; data_processing_pipeline = dp.create_pipeline() data_science_pipeline = ds.create_pipeline() return { \u0026#34;__default__\u0026#34;: data_processing_pipeline + data_science_pipeline, \u0026#34;dp\u0026#34;: data_processing_pipeline, \u0026#34;ds\u0026#34;: data_science_pipeline, } Conclusions This is pretty much all you need to replicate the kedro tutorial from within a single org-file. I would be remiss to not mention that kedro itself has a pretty good alternative of simply using their jupyter plugin, but I tend to use emacs all the time anyways, so I figured, what the hey.\nThere are still a couple things I\u0026rsquo;d like to ponder over insofar as best practices and future articles like:\nShould you split up the nodes and pipelines further? Using literate programmign to basically make a utility, processing, etc. code block. Version control, only on the tangled files? Making use of transclusion from other files. Turning the \u0026ldquo;relevant parts\u0026rdquo;\u0026rsquo; into a presentation - slicing the org document into exploratory analysis that ignores the code depending on audience. I\u0026rsquo;ll probably try to write an article doing a \u0026ldquo;real\u0026rdquo; analysis with this workflow in the future.\ncp ./literate-kedro-spaceflight.org ~/code/justin.vc/static/org/literate-kedro-spaceflight.org This copies the file when I export, which allows you to see the original org file if curious. That specifically includes how I tangled the files to the correct places. (And, once again, input welcome if I there\u0026rsquo;s better ways to do it).\n","permalink":"https://justin.vc/posts/literate-kedro-spaceflight/","summary":"\u003ch2 id=\"summary\"\u003eSummary\u003c/h2\u003e\n\u003cp\u003eThis is both a general(ish) explainer and template(s) for usage in data science,\nspecifically utilizing (formerly) Quantum Black\u0026rsquo;s now open-source (Linux\nFoundation) framework for creating \u003cspan class=\"sidenote\"\u003e\n\u003clabel class=\"sidenote-label\" for=\"f1\"\u003ereproducible, maintainable, and modular data science code.\u003c/label\u003e\n\u003cinput class=\"sidenote-checkbox\" type=\"checkbox\" id=\"f1\"\u003e\u003c/input\u003e\n\u003cspan class=\"sidenote-content\nsidenote-right\"\u003e  What does that mean? At its most simple it basically ties things into \u0026quot;nodes\u0026quot; and \u0026quot;pipelines\u0026quot;, where nodes are utility functions and functions that tie things together, and pipelines chain together multiple nodes, allowing for steps to be easily repeated. DAGs, they\u0026rsquo;re all the rage. \u003c/span\u003e\n\u003c/span\u003e\nMake sure to read their tutorial if you\u0026rsquo;re not\nfamiliar with it, it\u0026rsquo;s good (and I won\u0026rsquo;t be covering nearly as much as there,\nit\u0026rsquo;s under the assumption you\u0026rsquo;ve skimmed it):\u003c/p\u003e","title":"Literate Kedro: Using Org-mode for Data Science"},{"content":"Do you like emacs and try to use it for as much as possible? Do you like static site generators? Then this post may be of relevance to you.\nIf this all sounds greek to you, and you somehow wandered into here randomly, hoo-boy do I have a fun rabbit hole for you: Getting started with Emacs Doom.\nOkay, But Why? High-level: I really like emacs and writing notes in org-roam, and didn\u0026rsquo;t want to introduce mental overhead by writing things elsewhere. But I -also- don\u0026rsquo;t like how the default mode in ox-hugo is a monolithic org file.\nFor the longest (okay, not -that- long) I tried to use TiddlyWiki for most of my writing, both long and short form. This works well for Zettelkasten style notes, but I felt like it didn\u0026rsquo;t work out that well for anything other than atomic notes. Add to the fact that it\u0026rsquo;s a bit difficult to edit/make new notes easily outside of TiddlyWiki, I decided to move my note-taking to org-mode and emacs.\nI\u0026rsquo;m not a strict FOSS purist, so I still tend to like glamming things up with javascript (other people\u0026rsquo;s javascript), but I just love how fun it is to tinker with emacs configs. I still plan on using TiddlyWiki as display for my zettelkasten, but I wanted something nicer for my tutorials, portfolios, articles, and such. What articles? Rude. I was aware of Org-roam due to sheer popularity / stars on github and I decided to try it out. I\u0026rsquo;m (as of writing) not currently using anything super fancy, I\u0026rsquo;ve basically adapted Jethro Kuan\u0026rsquo;s guide on taking notes. I figured that since he created the thing, he\u0026rsquo;d be a good template to follow. I reccomend skimming his article for the basics if you\u0026rsquo;re new to this.\nThe second key part of this is ox-hugo, which can export .org files into markdown, which are served by hugo, a popular static-site generator. I\u0026rsquo;m not entirely sure if there\u0026rsquo;s any other options, but ox-hugo is by far the most popular that I could find, with easy setup and theming.\nThe basic workflow idea is, for any article capture, add the appropriate hugo headers and export to markdown to build your site. Simple as that. I\u0026rsquo;ll go into a bit more detail further down, but it really is that simple. I got my site working in less than an hour. I spent most of my time tinkering around with the javascript to get it looking like how I wanted to. But, also, a lot of the neat stuff I liked from TiddyWiki is pretty replicatable out-of-the-box depending on theming.1\nGetting Started I use Doom Emacs, which makes setup easy. You simply need to enable the appropriate sections in doom\u0026rsquo;s init.el. It shouldn\u0026rsquo;t be too difficult to do this in vanilla emacs, but I leave that as an exercise to the reader.\nDoom Emacs\u0026#39; org-language init.el Config Settings This is really the main part of the workflow. The key thing to note that is that ox-hugo would prefer you to do everything in a monolithic org file, essentially treating each heading as an article. That kind of conflicts with how Jethro does his notes as I understood things.\nBut, no worries, I say! It\u0026rsquo;s simple to just use the org-templates to capture the needed tags. (And most of the benefits of monolith aren\u0026rsquo;t as helpful unless writing successions of articles where inheriting headers is important.)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 ;; config.el, setting templates for org-roam (setq org-roam-capture-templates \u0026#39;((\u0026#34;m\u0026#34; \u0026#34;main\u0026#34; plain \u0026#34;%?\u0026#34; :if-new (file+head \u0026#34;main/${slug}.org\u0026#34; \u0026#34;#+title: ${title} #+created: %U #+last_modified: %U\\n\\n\u0026#34;) :immediate-finish t :unnarrowed t) (\u0026#34;r\u0026#34; \u0026#34;reference\u0026#34; plain \u0026#34;%?\u0026#34; :if-new (file+head \u0026#34;reference/${title}.org\u0026#34; \u0026#34;#+title: ${title} #+created: %U #+last_modified: %U\\n\\n\u0026#34;) :immediate-finish t :unnarrowed t) (\u0026#34;a\u0026#34; \u0026#34;article\u0026#34; plain ;; (article) \u0026#34;%?\u0026#34; :if-new (file+head \u0026#34;articles/${title}.org\u0026#34; \u0026#34;#+HUGO_BASE_DIR: ~/code/justin.vc #+HUGO_SECTION: ./posts #+HUGO_AUTO_SET_LASTMOD: t #+TITLE: ${title} #+DATE: %U #+HUGO_TAGS: article #+HUGO_DRAFT: true\\n\u0026#34;) :immediate-finish t :unnarrowed t))) If you\u0026rsquo;re familiar with or skimmed the earlier linked site, this is simply borrowing Jethro Kuan\u0026rsquo;s capture templates, -but- adding the necessary headers to utilize ox-hugo. article is where it starts, as I primarily intend to export \u0026ldquo;articles\u0026rdquo; as my hugo pages.\nHUGO_BASE_DIR - So, this is where you put your hugo site. In this case, it\u0026rsquo;s a folder for my website, justin.vc. If you\u0026rsquo;re new to hugo, you can download hugo and create a new site in a folder of your choosing with hugo new site /path/to/site, then simply choose said folder in your template.\nHUGO_SECTION - This is a bit self-explanatory, it\u0026rsquo;s just the section where your posts will go. In essence, ending up in somewhere such as justin.vc/posts/blah on the web, and in justin.vc/content/posts/blah.md file-wise.\nThese are the two mandatory headers, there\u0026rsquo;s some clashes between naming in Jethro\u0026rsquo;s examples, e.g. created -\u0026gt; DATE, but I figure it probably doesn\u0026rsquo;t matter, since the things in main/references don\u0026rsquo;t go to hugo.\nWorkflow In effect, after you\u0026rsquo;ve got the template done, you\u0026rsquo;re pretty much good to go. You can run org-hugo-export-to-md and it\u0026rsquo;ll automagically create a markdown copy of your post in the appropriate place.\nI\u0026rsquo;m not an expert, of course, but here\u0026rsquo;s some tips I noticed and some dumb things I wasted time on.\nIf you notice above, there\u0026rsquo;s HUGO_DRAFT, make sure to mark that as false (or get rid of it entirely if need be) when ready to publish. Otherwise hugo tends not to build things unless you explicitly tell it to. ox-hugo knows how to take care of images magically, for single-post org files you simply put them in an appropriate spot (I have them in my ~/.org/roam/articles/static folder, to keep them aligned with my posts) and ox-hugo will move them to -your code folder-/static/picture.png You can automatically export on save by adding an appropriate footer to the bottom. https://ox-hugo.scripter.co/doc/auto-export-on-saving/\nThat\u0026rsquo;s pretty much it! Whenver I want to write an article I just call org-roam-node-find, type in the file name I want, change the title, add tags, and poof.\nTips Theming is really easy! I really, really, really loathe javascript and even I found it simple to mess with. I personally like PaperModX, a fork of PaperMod that feels a bit nicer. There\u0026rsquo;s nothing stopping you from doing other .org files. You simply change the appropriate headers. For example, my blog roll link is simply an export of my elfeed-org file that I use for my RSS feed. I know I mentioned this is geared towards individual org-notes, but I believe there\u0026rsquo;s nothing stopping from mixing and matching! I plan on using monolithic org files for certain topics, such as conferences or chains of tutorials. This is more of an org-tip, but be aware that you can add alt-text to your images with #+ATTR_HTML :alt This is text above an image. I think it helps with SEO, but also it\u0026rsquo;s useful for those who are hard-of-seeing. You\u0026rsquo;re using org-mode, make use of code blocks! Think of all the neat tutorials you could write about literate programming. Caveats Of course, this all doesn\u0026rsquo;t come for free. As ox-hugo uses a parser to move files into markdown, there are a couple features that are a bit, finnicky, as one would say.\nThe main issue I noticed is shortcodes, there are a lot of in-built shortcodes that work just fine, but once you get into custom ones, that\u0026rsquo;s where you run into issues.\nExample: Sidenote Shortcode For example, to implement sidenotes Such as this. It gets finnicky around ,\u0026rsquo;s since those are used to seperate the arguments. But it\u0026rsquo;s still pretty nifty. I -think- you can also do LaTeX in this. Thanks to Danilafe\u0026rsquo;s blog for figuring this out in pure CSS. I tried to do it with javascript but hugo didn\u0026rsquo;t like it. I had to make an org-mode macro, and it requires everytime I want to make one, to use syntax such as:\n{{{sidenote(f2 \u0026quot;This is inline.\u0026quot; \u0026quot;Hello!\u0026quot;)}}}\nYou could see that getting a bit distracting. Thankfully, you can make macros at the global level. I had to google a bit, since it doesn\u0026rsquo;t seem to come up quickly, but it\u0026rsquo;s about as simple as setting a org-macro, then creating a snippet.\n\u0026lt;span class=\u0026#34;sidenote\u0026#34;\u0026gt; \u0026lt;label class=\u0026#34;sidenote-label\u0026#34; for=\u0026#34;{{ .Get 0 }}\u0026#34;\u0026gt;{{ .Get 1 }}\u0026lt;/label\u0026gt; \u0026lt;input class=\u0026#34;sidenote-checkbox\u0026#34; type=\u0026#34;checkbox\u0026#34; id=\u0026#34;{{ .Get 0 }}\u0026#34;\u0026gt;\u0026lt;/input\u0026gt; \u0026lt;span class=\u0026#34;sidenote-content sidenote-right\u0026#34;\u0026gt;{{ .Inner }}\u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; The html for the sidenotes. Note that the html is 0 indexed, and the macro in org is 1 indexed. This threw me off for a bit. (setq org-export-global-macros \u0026#39;( (\u0026#34;sidenote\u0026#34; . \u0026#34;@@html:{ {% sidenote $1 $2 %} } $3 { {% /sidenote %} }@@\u0026#34;) )) This is how you would add a macro at the global level. Replace the spacing in the brackets to the respective {{}}. Hugo didn\u0026rsquo;t like me replicating shortcode for example purposes.\n# -*- mode: snippet -*- # name: sidenote creation # uuid: oxhugo_sidenote # key: snote # -- {{{sidenote(${1:label}, ${2:inline text}, ${3:sidetext})}}} This is a snippet for making sidenotes easier.\nConclusions There are probably some quality of life things I could add such as adding an interactive step to the capture template for tags, and adding in the footer automatically, but I figure I\u0026rsquo;ll hone my process as I go along, and I\u0026rsquo;ll try to update this post when it comes to it, or write a new one if necessary.\nDo you do something similar, or have any input? Feel free to contact me and let me know, as I said, I\u0026rsquo;m just kind of bumbling through this. But even writing this article was a piece of cake, so I have good feelings about it and hope to hone this through several iterations of work.\nTLDR; make sure capture template is set correctly -\u0026gt; org-roam-node-find -\u0026gt; enter file name -\u0026gt; add tags / change title to more \u0026ldquo;readable\u0026rdquo; -\u0026gt; Get writing! -\u0026gt; org-hugo-export-to-md\nPost-Update Notes:\nhttps://scripter.co/sidenotes-using-only-css/, read this after I wrote my own. Also a good way of making sidenotes and how to use ox-hugo. (This is ox-hugo\u0026rsquo;s creator) Hello! This is a footnote. Yay. In other topics I\u0026rsquo;ll probably try to limit footnotes to actual citations with citar or the like.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://justin.vc/posts/ox-hugo-and-org-roam/","summary":"\u003cp\u003eDo you like emacs and try to use it for as much as possible? Do you like static\nsite generators? Then this post may be of relevance to you.\u003c/p\u003e\n\u003cp\u003eIf this all sounds greek to you, and you somehow\nwandered into here randomly, hoo-boy do I have a fun rabbit hole for you:\n\u003ca href=\"https:www.youtube.com/watch?v=rCMh7srOqvw\"\u003eGetting started with Emacs Doom\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"okay-but-why\"\u003eOkay, But Why?\u003c/h2\u003e\n\u003cp\u003e\u003cem\u003eHigh-level: I really like emacs and writing notes in org-roam, and didn\u0026rsquo;t want\nto introduce mental overhead by writing things elsewhere. But I -also- don\u0026rsquo;t\nlike how the default mode in ox-hugo is a monolithic org file.\u003c/em\u003e\u003c/p\u003e","title":"Using ox-hugo and Org-roam for Writing"},{"content":"Hello! I\u0026rsquo;m Justin! I\u0026rsquo;m just a data scientist/software engineer who likes learning things in his free time. Specifically, my interests generally fall into Open source/emacs, applied mathematics/statistics, Catholic/Chinese history + poetry, \u0026amp; general media.\nBackground Technical In my day-to-day when working I\u0026rsquo;m generally using Python. I use javascript when tinkering around with my various web apps. I know enough elisp to get by, but generally only use it for convenience functions in emacs. I\u0026rsquo;ve built a couple of things in Rust but my knowledge tends to atrophy due to lack of usage.\nThis site This site is created with a fork of PaperModX, which I\u0026rsquo;m calling PaperModulo. Almost everything is written as org-mode documents that I parse with ox-hugo. Hoping that having -everything- as org mode documents makes it easier to write in general, since I use org-mode for my agenda/todo lists, reading (org-noter + pdf-tools) and coding. Okay, sometimes I still use Jupyter and VSCode. Sue me. There\u0026rsquo;s also some usage of Google docs for things I need there to be less friction on (e.g. - what I\u0026rsquo;m doing)\nUsing I have my own little battlestation that I do my work on, I\u0026rsquo;ve never been a big laptop person. This is probably (one of the many reasons) I\u0026rsquo;d do poorly as a consultant. I like using Linux because tiling window managers are neat. See my dotfiles. Outside of not being able to (easily) do VR, I don\u0026rsquo;t particularly miss Windows, and I\u0026rsquo;ve never been a fan of MacOS. I\u0026rsquo;m just waiting for the day they put Asahi Linux on the ARM chips.\nTODO: more details here.\nMedia Consumption Reading I try to do most of my tracking on goodreads. I know, evil Amazon, but the API is pretty good. I try to backup my data but I\u0026rsquo;m not sure what other good alternatives are. Feel free to suggest some.\nWatching I last watched (show/movie respectively) via Trakt.tv:\nI use anilist for tracking anime/manga. I know there\u0026rsquo;s a debate on MAL vs. AL, but I like the interface and the GraphQL is nice once you get used to it. (read: salty that brickfrog was taken on MAL)\nListening I don\u0026rsquo;t listen to a lot of music, feel free to check my recently played tracks on last.fm. The embed is a spotify playlist that I\u0026rsquo;ve been listening to recently on spotify:\nrateyourmusic.com - I don\u0026rsquo;t use this much, but I do use it to track my music collection. I\u0026rsquo;m not sure if I\u0026rsquo;ll keep it up, but I do like the idea of having a collection of music I\u0026rsquo;ve listened to. ","permalink":"https://justin.vc/about/","summary":"\u003cp\u003eHello! I\u0026rsquo;m Justin! I\u0026rsquo;m just a data scientist/software engineer who likes\nlearning things in his free time. Specifically, my interests generally fall into\nOpen source/emacs, applied mathematics/statistics, Catholic/Chinese history + poetry, \u0026amp; general media.\u003c/p\u003e\n\u003csection class=\"outline-1nil\"\u003e\n\u003ch2 id=\"background\"\u003eBackground\u003c/h2\u003e\n\u003cdiv class=\"outline-2nil\"\u003e\n\u003ch3 id=\"technical\"\u003eTechnical\u003c/h3\u003e\n\u003cp\u003eIn my day-to-day when working I\u0026rsquo;m generally using Python. I use javascript when tinkering around with my various web apps. I know enough elisp to get by, but generally only use it for convenience functions in emacs. I\u0026rsquo;ve built a couple of things in Rust but my knowledge tends to atrophy due to lack of usage.\u003c/p\u003e","title":"About"},{"content":"Right now I am exporting this as my \u0026ldquo;blog roll\u0026rdquo; section of my main site. I could probably stand to clean this up, but still it shows the stuff I watch in my reader. It exports when I save, so it should be pretty much to date.\nI\u0026rsquo;m also (trying to) put a blurb or such on how I found the blog or add the context for why I added it. Because this is primarily for feed-reading, most of the links are to feeds that I tried to regex back into normal links.\nIf for some reason you\u0026rsquo;re interested in subsuming my feeds, I keep a copy of the .opml file.\nLinks Aggregators Dev / Software\nLove hate relationships with these sites, but the gems are worth it. Avoid the comments (mostly).\nhttps://lobste.rs https://news.ycombinator.com Blogs Topic\nSelf-explanatory, sites that are less person-focused and more on the topic. Generally has multiple authors or a company site.\nSoftware / Programming\nData\nThis topic is more of a catchall for analytics and general data topics. Be it discussion on databases or just general analytics topics such as SQL / OLAP queries, etc. https://motherduck.com\nLooks to be the blog/site associated with enterprise duckdb. Pretty neat. Emacs\nhttps://emacsredux.com General\nhttps://hackaday.com/blog/feed Machine Learning\nhttps://developer.nvidia.com/blog/tag/technical-walkthrough/feed/\nNVIDIA\u0026rsquo;s \u0026ldquo;technical blog\u0026rdquo; which is primarily hands-on and examples. Python\nhttps://snarky.ca\nLots of neat python implementation posts. Rust\nhttps://this-week-in-rust.org/rss.xml Statistics\nhttps://statisticsbyjim.com\nModerately rudimentary stuff, but I think it\u0026rsquo;s worth a refresher every now and then. Religion\nChristianity\nCatholicism\nhttps://www.dominicanajournal.org https://thejesuitpost.org https://www.vaticannews.va/en/word-of-the-day.rss.xml Evangelical\nhttps://www.proginosko.com\nCreator of leechblock NG (not really realated to the content, but it\u0026rsquo;s how I found his site.) https://www.iliadforum.com\nDatabase of questions about Christianity. Games\nVideo Games\nhttps://vengilikes.wordpress.com/feed/\nVisual novel blog. I forget how I found them (maybe I googled a review for one I was playing?). But visual novels are one of the few genres of games I play nowadays. Person\nBlogs centered around a specific writer/group. Things I\u0026rsquo;ve wandered into and liked at least one article/story.\nhttp://aaronsw.com/weblog/index.xml\nAaron Swartz\u0026rsquo;s old blog. (RIP) - even though it\u0026rsquo;s not updated, I like keeping it around on my reader. I sometimes go back to read his old posts. http://bactra.org/notebooks/index.rss\nCosma. I think I found via one of Rao\u0026rsquo;s links. Physics professor. Good link jumping point due to recommended / not links. Seems to mass throw notes at the RSS feed though. http://boston.conman.org/index.atom\nA blog I found while reading about the gemini protocol. Seems a bit cantankerous but I dig the vibe.\nhttp://feeds.feedburner.com/thelastpsychiatrist/fLMy?format=xml https://blog.dornea.nu\nanother emacs blogger - remember running into his blog several times while I was doing elfeed config edits https://borretti.me https://cliffle.com/rss.xml\nHas some other things, but found via rust discussion on the typestate pattern. https://danluu.com https://danwang.co https://dusted.dk\nno RSS(? - I think, I didn\u0026rsquo;t look too hard) - broken up into different sections, still neat. https://fantasticanachronism.com https://feeds.feedblitz.com/marginalrevolution\u0026amp;x=1 https://hotelconcierge.tumblr.com/rss https://journal.stuffwithstuff.com/rss.xml\nWrote an (apparently - I need to read it) on programming language design / interpreters. https://ludic.mataroa.blog\nsaw their rant on agile via another site I read - good! https://milkyeggs.com\nfbifemboy\u0026rsquo;s blog, stopped updating, I think https://nintil.com https://nonint.com/feed/\nJames Betker\u0026rsquo;s blog, of Google/OpenAI(?)- mostly posts on machine learning. https://piratewires.com https://prog21.dadgum.com/atom.xml\n\u0026ldquo;Programming\u0026rdquo; / thoughts-on tech blog that I like, it\u0026rsquo;s no longer updated but there\u0026rsquo;s some gems.\nhttps://reorx.com/feed.xml https://ribbonfarm.com https://sachachua.com/blog/feed/ https://slatestarcodex.com/feed\nRecommended\nhttps://slatestarcodex.com/2014/07/30/meditations-on-moloch/ Substack\nhttps://astralcodexten.substack.com\nRecommended\nHeuristics that Almost Always Work https://erikhoel.substack.com https://freddiedeboer.substack.com\nRecommended\nhttps://freddiedeboer.substack.com/p/planet-of-cops https://octal.substack.com https://samkriss.substack.com https://sashachapin.substack.com https://www.blockedandreported.org\nThis is a podcast, but it\u0026rsquo;s sometimes there\u0026rsquo;s supplementary info that\u0026rsquo;s in the posts. https://www.fromthenew.world\nBrian Chau\u0026rsquo;s writing https://www.infinitescroll.us\nJeremiah Johnson\u0026rsquo;s substack, familiar with him via the Neoliberal project. https://www.slowboring.com https://www.strangeloopcanon.com News The news is probably a waste of time. Limiting it down to specific publications relevant to my interest/career. Keeping this section open just-in-case.\nComics I like comics. Need to read more.\nhttps://www.smbc-comics.com/comic Literary As opposed to blog this would be collective works, literary criticism sites, etc. etc. - differentiating profit/mainstream with the magazine vs. zine distinction.\nMagazine https://www.nplusonemag.com Zines https://www.surfaces.cx\nAn \u0026ldquo;open literary arts platform\u0026rdquo; Audio Podcasts I\u0026rsquo;ve seen workflows that allow for mpd/mpc and emms to listen to podcasts inside emacs but it seemed fiddly.\nhttps://talkpython.fm/episodes/rss Other These are not necessarily feeds, but listings of things I\u0026rsquo;ve read that might be worth keeping track of for others / things I\u0026rsquo;ve deemed important enough to read more than once but don\u0026rsquo;t have a feed associated.\nhttps://equilibriabook.com ","permalink":"https://justin.vc/elfeed/","summary":"\u003cp\u003eRight now I am exporting this as my \u0026ldquo;blog roll\u0026rdquo; section of my main\nsite. I could probably stand to clean this up, but still it shows the stuff I\nwatch in my reader. It exports when I save, so it should be pretty much to\ndate.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;m also (trying to) put a blurb or such on how I found the blog or add the\ncontext for why I added it. Because this is primarily for feed-reading, most of\nthe links are to feeds that I tried to regex back into normal links.\u003c/p\u003e","title":"Links"},{"content":"There\u0026rsquo;s a neat extension for Quotebacks for chrome/firefox that lets you record snippets of text. I parse it at build-time then display it here. I usually grab random text from things I\u0026rsquo;m reading/see.\n","permalink":"https://justin.vc/quotes/","summary":"\u003cp\u003eThere\u0026rsquo;s a neat extension for \u003cstrong\u003e\u003ca href=\"https://quotebacks.net/\"\u003eQuotebacks\u003c/a\u003e\u003c/strong\u003e for chrome/firefox that lets you record snippets of text. I parse it at build-time then display it here. I usually grab random text from things I\u0026rsquo;m reading/see.\u003c/p\u003e","title":"QuoteBack Library"}]