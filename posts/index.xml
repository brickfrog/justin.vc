<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on justin.vc</title>
    <link>https://justin.vc/posts/</link>
    <description>Recent content in Posts on justin.vc</description>
    <image>
      <url>https://justin.vc/</url>
      <link>https://justin.vc/</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 18 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://justin.vc/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>YouTube &amp; elfeed</title>
      <link>https://justin.vc/posts/youtube-elfeed-mpv/</link>
      <pubDate>Thu, 18 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://justin.vc/posts/youtube-elfeed-mpv/</guid>
      <description>&lt;div class=&#34;alert-primary alert&#34;&gt;
&lt;div class=&#34;alert-heading&#34;&gt;
&lt;p&gt;Update&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Amusingly I wrote this after a small delay in a ublock-origin update made things
annoying but it seems like it&amp;rsquo;s relevant again considering their direct video
injection (at least as of ~ 13/06 of 24)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Realized I should probably just do more short-form stream of consciousness posts
and things I&amp;rsquo;m tinkering with. This will be my first ox-hugo post of essentially
tossing them into one giant .org file. Going to try use this method from now on
unless it&amp;rsquo;s like some sort of mega-article.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<div class="alert-primary alert">
<div class="alert-heading">
<p>Update</p>
</div>
<p>Amusingly I wrote this after a small delay in a ublock-origin update made things
annoying but it seems like it&rsquo;s relevant again considering their direct video
injection (at least as of ~ 13/06 of 24)</p>
</div>
<p>Realized I should probably just do more short-form stream of consciousness posts
and things I&rsquo;m tinkering with. This will be my first ox-hugo post of essentially
tossing them into one giant .org file. Going to try use this method from now on
unless it&rsquo;s like some sort of mega-article.</p>
<section class="outline-1nil">
<h2 id="background">Background</h2>
<p>Okay, I&rsquo;m sure y&rsquo;all have notice Google/YouTube going full-on war on adblockers
recently and while there&rsquo;s options such as simply using another browser (I&rsquo;ve
noticed Firefox doesn&rsquo;t get hit as often) I&rsquo;ve decided to use this as an excuse
to cut down on video consumption.</p>
<div class="outline-2nil">
<h3 id="yt-dlp">yt-dlp <span class="tag"><span class="software">software</span></span></h3>
<p><a href="https://github.com/yt-dlp/yt-dlp">yt-dlp</a> is a neat fork of youtube-dlp which
lets you download directly from youtube (and many other sites). Normally you
could use it like thus:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">yt-dlp -f mp4 https://www.youtube.com/watch<span class="se">\?</span>v<span class="se">\=</span>jNQXAC9IVRw
</span></span></code></pre></div></div>
<div class="outline-2nil">
<h3 id="elfeed">elfeed</h3>
<p>If you&rsquo;re familiar with emacs, you&rsquo;re probably familiar with <a href="https://github.com/skeeto/elfeed">elfeed</a>. The most
popular (I think) feed reader for it. In addition to elfeed, I use
<a href="https://github.com/remyhonig/elfeed-org">elfeed-org</a> which allows you to store
your feeds in a normal .org file, which makes things a lot less of a hassle. For example, I export my <a href="https://justin.vc/elfeed">blog
roll</a> and use that as a compendium of things to read.</p>
</div>
</section>
<section class="outline-1nil">
<h2 id="combining-elfeed-plus-yt-dlp">Combining Elfeed + yt-dlp</h2>
<p>Okay, so the fun thing is in bash you could proceed to pipe yt-dlp to mpv and
essentially just watch youtube in your video player. You can then chain this with elfeed
because every youtube channel has an RSS feed behind it.</p>
<p>For example this is <span class="sidenote">
<label class="sidenote-label" for="f4">Xah Lee's</label>
<input class="sidenote-checkbox" type="checkbox" id="f4"></input>
<span class="sidenote-content
sidenote-right">  Kind of a fun/weird emacs/keyboard streamer. Very &lsquo;un-PC&rsquo; as it were, as a warning. Why did I choose him for the example? Dunno! </span>
</span>
<a href="https://www.youtube.com/feeds/videos.xml?channel_id=UCXEJNKH9I4xsoyUNN3IL96A">feed</a>.</p>
<div class="outline-2nil">
<h3 id="getting-your-feed-list">Getting your feed list</h3>
<p>You can export your youtube data by following the instructions
<a href="https://support.google.com/accounts/answer/3024190?hl=en">here</a>. This gives you
what is essentially a dump of all the channel ids, etc. that you&rsquo;re subscribed
to. Then you can bash script / python script, etc. to make it into a list.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Load the CSV file</span>
</span></span><span class="line"><span class="cl"><span class="n">file_path</span> <span class="o">=</span> <span class="s1">&#39;/mnt/data/subscriptions.csv&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">subscriptions</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Generating RSS links for each channel</span>
</span></span><span class="line"><span class="cl"><span class="n">rss_links</span> <span class="o">=</span> <span class="n">subscriptions</span><span class="p">[</span><span class="s1">&#39;Channel Id&#39;</span><span class="p">]</span> \
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="nb">id</span><span class="p">:</span> <span class="sa">f</span><span class="s2">&#34;https://www.youtube.com/feeds/videos.xml?channel_id=</span><span class="si">{</span><span class="nb">id</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">subscriptions</span><span class="p">[</span><span class="s1">&#39;RSS Link&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">rss_links</span>
</span></span></code></pre></div></div>
<div class="outline-2nil">
<h3 id="importing-into-emacs">Importing into emacs</h3>
<p>You can then use something like org-elfeed to add all your items into a list
(using the aforementioned link as an example) or simply ask GPT or another LLM
to format it in such a way as needed (you could even use a web-based RSS reader
if you don&rsquo;t want to use emacs for some reason):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-org" data-lang="org"><span class="line"><span class="cl">Video :video:noexport:
</span></span><span class="line"><span class="cl">YouTube :youtube:
</span></span><span class="line"><span class="cl">https://www.youtube.com/feeds/videos.xml?channel_id=UCXEJNKH9I4xsoyUNN3IL96A
</span></span></code></pre></div><p>This allows you to have all your subscriptions into your RSS reader.
You can then add a command / shortcut into your config that pipes it into mpv
as such (for example, in my case the <code>b</code> key would normally open it in a
browser but now uses mpv). And adding a tag allows you to search only for
videos.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">defun</span> <span class="nv">mpv-play-url</span> <span class="p">(</span><span class="nv">url</span> <span class="kp">&amp;rest</span> <span class="nv">args</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;Play the given URL in MPV.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">interactive</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nf">start-process</span> <span class="s">&#34;my-process&#34;</span> <span class="no">nil</span> <span class="s">&#34;mpv&#34;</span>
</span></span><span class="line"><span class="cl">                        <span class="s">&#34;--speed=2.0&#34;</span>
</span></span><span class="line"><span class="cl">                        <span class="s">&#34;--pause&#34;</span>
</span></span><span class="line"><span class="cl">                        <span class="s">&#34;--cache=yes&#34;</span>
</span></span><span class="line"><span class="cl">                        <span class="s">&#34;demuxer-max-bytes=5000M&#34;</span>
</span></span><span class="line"><span class="cl">                        <span class="s">&#34;demuxer-max-back-bytes=3000M&#34;</span> <span class="nv">url</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">setq</span> <span class="nv">browse-url-handlers</span>
</span></span><span class="line"><span class="cl">      <span class="o">&#39;</span><span class="p">((</span><span class="s">&#34;youtu\\.?be.*\\.xml&#34;</span> <span class="o">.</span> <span class="nv">browse-url-default-browser</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="s">&#34;youtu\\.?be&#34;</span> <span class="o">.</span> <span class="nv">mpv-play-url</span><span class="p">)))</span>
</span></span></code></pre></div></div>
</section>
<section class="outline-1nil">
<h2 id="conclusion">Conclusion</h2>
<p>The only annoyances are that if you&rsquo;re constantly subscribing to new things
or watching from the algorithm this isn&rsquo;t a good workflow. I&rsquo;m also sure pinging the RSS constantly isn&rsquo;t great
efficiency-wise (the feeds only have the last 15 items although). I, however, only try to check once a day and I tend to watch the same people so
I don&rsquo;t waste time. If nothing else this has lessened me mindlessly
refreshing by adding a bit of friction.</p>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>A Reminder to Check on Doom Defaults: Org-Agenda</title>
      <link>https://justin.vc/posts/reminder-check-doom-defaults-agenda/</link>
      <pubDate>Tue, 21 Feb 2023 12:33:00 -0500</pubDate>
      
      <guid>https://justin.vc/posts/reminder-check-doom-defaults-agenda/</guid>
      <description>&lt;p&gt;So, I&amp;rsquo;ve been trying to shuffle back into using emacs for more things. This week
specifically I was looking to wean myself off todoist and get back into using
org-mode for tasks/todo&amp;rsquo;s, etc. I remembered finding a blog post by &lt;a href=&#34;https://www.rousette.org.uk/archives/doom-emacs-tweaks-org-journal-and-org-super-agenda/&#34;&gt;&amp;ldquo;but she&amp;rsquo;s a
girl&amp;hellip;&amp;rdquo;&lt;/a&gt; on her setup, relevant part repeated here for clarity:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;def-package!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-super-agenda&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;:after&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-agenda&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;:init&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-agenda-skip-scheduled-if-done&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nv&#34;&gt;org-agenda-skip-deadline-if-done&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nv&#34;&gt;org-agenda-include-deadlines&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nv&#34;&gt;org-agenda-block-separator&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nv&#34;&gt;org-agenda-compact-blocks&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nv&#34;&gt;org-agenda-start-day&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;;; i.e. today&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nv&#34;&gt;org-agenda-span&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nv&#34;&gt;org-agenda-start-on-weekday&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-agenda-custom-commands&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Super view&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;:config&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;org-super-agenda-mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I thought, &amp;ldquo;oh, swell&amp;rdquo; someone else made a easy config that&amp;rsquo;s nicer than the one
in the project github, this will be useful!&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>So, I&rsquo;ve been trying to shuffle back into using emacs for more things. This week
specifically I was looking to wean myself off todoist and get back into using
org-mode for tasks/todo&rsquo;s, etc. I remembered finding a blog post by <a href="https://www.rousette.org.uk/archives/doom-emacs-tweaks-org-journal-and-org-super-agenda/">&ldquo;but she&rsquo;s a
girl&hellip;&rdquo;</a> on her setup, relevant part repeated here for clarity:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nv">def-package!</span> <span class="nv">org-super-agenda</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:after</span> <span class="nv">org-agenda</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:init</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">setq</span> <span class="nv">org-agenda-skip-scheduled-if-done</span> <span class="no">t</span>
</span></span><span class="line"><span class="cl">      <span class="nv">org-agenda-skip-deadline-if-done</span> <span class="no">t</span>
</span></span><span class="line"><span class="cl">      <span class="nv">org-agenda-include-deadlines</span> <span class="no">t</span>
</span></span><span class="line"><span class="cl">      <span class="nv">org-agenda-block-separator</span> <span class="no">nil</span>
</span></span><span class="line"><span class="cl">      <span class="nv">org-agenda-compact-blocks</span> <span class="no">t</span>
</span></span><span class="line"><span class="cl">      <span class="nv">org-agenda-start-day</span> <span class="no">nil</span> <span class="c1">;; i.e. today</span>
</span></span><span class="line"><span class="cl">      <span class="nv">org-agenda-span</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">      <span class="nv">org-agenda-start-on-weekday</span> <span class="no">nil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">setq</span> <span class="nv">org-agenda-custom-commands</span>
</span></span><span class="line"><span class="cl">        <span class="o">&#39;</span><span class="p">((</span><span class="s">&#34;c&#34;</span> <span class="s">&#34;Super view&#34;</span>
</span></span><span class="line"><span class="cl">           <span class="o">...</span>
</span></span><span class="line"><span class="cl">  <span class="nb">:config</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nv">org-super-agenda-mode</span><span class="p">))</span>
</span></span></code></pre></div><p>I thought, &ldquo;oh, swell&rdquo; someone else made a easy config that&rsquo;s nicer than the one
in the project github, this will be useful!</p>
<p>Now, notice the &ldquo;org-agenda-start-day&rdquo; set to nil, which defaults the &ldquo;view&rdquo; to the
current date.  I encountered a weird problem
where &ldquo;org-agenda-start-day&rdquo; seemed to default to &ldquo;-3d&rdquo;, which, in effect would cause
org-super-agenda to show the wrong date (three days before). No matter what I did it seemed to
default back, which set me on a bit of a &ldquo;I will figure this out out of spite!&rdquo;
path. I spent an hour randomly looking through my own literate config and
config.el, nothing seemed to work except for manually running the block which
would set things correctly until I next restarted the emacs server / client.</p>
<p>I ended up getting annoyed and asking for help on
<span class="sidenote">
<label class="sidenote-label" for="f1">Mastodon</label>
<input class="sidenote-checkbox" type="checkbox" id="f1"></input>
<span class="sidenote-content
sidenote-right">  I joined this particular instance cause it seemed pretty open, without mass fediblocking and such. </span>
</span>
(<a href="https://emacs.ch">https://emacs.ch</a>).
where a helpful person by the name of Sylvain Soliman
(<a href="https://pouet.chapril.org/@soliman">@soliman@pouet.chapril.org</a>) pointed me in the direction of Doom&rsquo;s
+org-init-agenda-h, located at /modules/lang/org/config.el - apparently doom&rsquo;s
org setup would overwrite it and, if you were blindly following instructions
from someone else&rsquo;s setup, would never notice it.</p>
<figure>
    <img loading="lazy" src="/images/org-config-start-day.png"
         alt="section of config for lang/org/config.el showing doom sets the variable org-agenda-start-day to -3d"/> 
</figure>

<p>Really, this was all just a round about way me saying, if you&rsquo;re new to doom / emacs /
or you&rsquo;re just forgetful like I am, and something weird seems to be going on,
make sure to check what doom is setting in the background.</p>
<p>TLDR: Everything worked out when changing the after! to org instead of
org-agenda. Check the doom configs if something weird is going on and try user
after! org instead of the specific package to see if that changes anything.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Brute Forcing Pandoc with Panflute</title>
      <link>https://justin.vc/posts/brute-forcing-pandoc-with-panflute/</link>
      <pubDate>Mon, 08 Aug 2022 15:30:00 -0400</pubDate>
      
      <guid>https://justin.vc/posts/brute-forcing-pandoc-with-panflute/</guid>
      <description>&lt;p&gt;Hello! This is a short post, more of a &amp;ldquo;here&amp;rsquo;s an intersting thing I wandered
into&amp;rdquo; type of post. I originally wrote most of my posts on TiddlyWiki, which is
where &lt;a href=&#34;https://www.zk.justin.vc&#34;&gt;https://www.zk.justin.vc&lt;/a&gt; resides now. I decided to move this site to Hugo
and was pondering: &amp;ldquo;Could I write all my notes in org-mode, and convert them?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;I remembered &lt;a href=&#34;https://pandoc.org&#34;&gt;pandoc&lt;/a&gt; and how simple it was to convert various LaTeX and markdown
files back and forth. The problem was, there&amp;rsquo;s no converter for TiddlyWiki due
to its dynamism. I found a couple Python2 githubs but they seemed a bit out of
date. So I took it on myself to figure out how pandoc filters worked.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Hello! This is a short post, more of a &ldquo;here&rsquo;s an intersting thing I wandered
into&rdquo; type of post. I originally wrote most of my posts on TiddlyWiki, which is
where <a href="https://www.zk.justin.vc">https://www.zk.justin.vc</a> resides now. I decided to move this site to Hugo
and was pondering: &ldquo;Could I write all my notes in org-mode, and convert them?&rdquo;</p>
<p>I remembered <a href="https://pandoc.org">pandoc</a> and how simple it was to convert various LaTeX and markdown
files back and forth. The problem was, there&rsquo;s no converter for TiddlyWiki due
to its dynamism. I found a couple Python2 githubs but they seemed a bit out of
date. So I took it on myself to figure out how pandoc filters worked.</p>
<p>I didn&rsquo;t want to spend -too- much time, so writing Haskell and Lua filters were
out. I&rsquo;d probably seriously consider Lua next time just cause it seems to be a
language that is on the up-and-up, but that&rsquo;s neither here nor there.</p>
<p>Enter <a href="https://github.com/sergiocorreia/panflute">panflute</a>, a pythonic way to write pandoc filters.It&rsquo;s relatively old, but
I didn&rsquo;t have any issues, even on the newest version of pandoc that was released
just a couple days ago (August &lsquo;22).</p>
<p>Essentially you operate on the normal pandoc portions of the AST such as Para /
Header / Strings, and use a filter to change them. My use case was kind of weird
where I wanted to edit the text wholecloth in some cases.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="org-coderef--e1bcfb-1"><a class="lnlinks" href="#org-coderef--e1bcfb-1"> 1</a>
</span><span class="lnt" id="org-coderef--e1bcfb-2"><a class="lnlinks" href="#org-coderef--e1bcfb-2"> 2</a>
</span><span class="lnt" id="org-coderef--e1bcfb-3"><a class="lnlinks" href="#org-coderef--e1bcfb-3"> 3</a>
</span><span class="lnt" id="org-coderef--e1bcfb-4"><a class="lnlinks" href="#org-coderef--e1bcfb-4"> 4</a>
</span><span class="lnt" id="org-coderef--e1bcfb-5"><a class="lnlinks" href="#org-coderef--e1bcfb-5"> 5</a>
</span><span class="lnt" id="org-coderef--e1bcfb-6"><a class="lnlinks" href="#org-coderef--e1bcfb-6"> 6</a>
</span><span class="lnt" id="org-coderef--e1bcfb-7"><a class="lnlinks" href="#org-coderef--e1bcfb-7"> 7</a>
</span><span class="lnt" id="org-coderef--e1bcfb-8"><a class="lnlinks" href="#org-coderef--e1bcfb-8"> 8</a>
</span><span class="lnt" id="org-coderef--e1bcfb-9"><a class="lnlinks" href="#org-coderef--e1bcfb-9"> 9</a>
</span><span class="lnt" id="org-coderef--e1bcfb-10"><a class="lnlinks" href="#org-coderef--e1bcfb-10">10</a>
</span><span class="lnt" id="org-coderef--e1bcfb-11"><a class="lnlinks" href="#org-coderef--e1bcfb-11">11</a>
</span><span class="lnt" id="org-coderef--e1bcfb-12"><a class="lnlinks" href="#org-coderef--e1bcfb-12">12</a>
</span><span class="lnt" id="org-coderef--e1bcfb-13"><a class="lnlinks" href="#org-coderef--e1bcfb-13">13</a>
</span><span class="lnt" id="org-coderef--e1bcfb-14"><a class="lnlinks" href="#org-coderef--e1bcfb-14">14</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">panflute</span> <span class="kn">import</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">increase_header_level</span><span class="p">(</span><span class="n">elem</span><span class="p">,</span> <span class="n">doc</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">elem</span><span class="p">)</span> <span class="o">==</span> <span class="n">Header</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">elem</span><span class="o">.</span><span class="n">level</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">elem</span><span class="o">.</span><span class="n">level</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="p">[]</span> <span class="c1">#                                    (delete action)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">doc</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">run_filter</span><span class="p">(</span><span class="n">increase_header_level</span><span class="p">,</span> <span class="n">doc</span><span class="o">=</span><span class="n">doc</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">main</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>As you can see in the example, it&rsquo;s pretty self-intuitive when you&rsquo;re doing
simple things. This simply looks at each element to see if there&rsquo;s a &ldquo;header&rdquo;,
and adds a level if it&rsquo;s below level 6. If they&rsquo;re level 6, then it deletes them.</p>
<p>I probably could&rsquo;ve just used normal bash tools but I wanted to do everything in
one script. This article will be more of a code-dump with my thought process. I don&rsquo;t
promise it will be pretty but I figured I didn&rsquo;t see many other people doing
this so it&rsquo;s not -completely- useless.</p>
<p>So, text for tiddlywiki tends to be something like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">title: testing test
</span></span><span class="line"><span class="cl">type: text/vnd.tiddlywiki
</span></span><span class="line"><span class="cl">tags: programming org
</span></span><span class="line"><span class="cl">created: 20220805
</span></span><span class="line"><span class="cl">modified: 20220808
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">! Summary
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">This is a test article for pandoc and figure out all the associated classes. [[flow state]] is neat. Beep. Beep.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> * This
</span></span><span class="line"><span class="cl"> * is
</span></span><span class="line"><span class="cl"> * a
</span></span><span class="line"><span class="cl">  * nested
</span></span><span class="line"><span class="cl">  * list
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">!! Other
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Also some other stuff, I guess. Woop. A link to something such as [[julia
</span></span><span class="line"><span class="cl">programming language]]
</span></span></code></pre></div><p>With all the metadata at the top, which was the key difficulty. The second was
that org-roam primarily uses its ids to link. This I can&rsquo;t take the credit for,
I borrowed code from: <a href="https://www.amoradi.org/20210730173543.html">https://www.amoradi.org/20210730173543.html</a>.</p>
<p>The converter for MediaWiki gets you almost all of the way there, excluding the
metadata. It, thankfully, uses the &lsquo;same <code>[[ ]]</code> syntax for links that TiddlyWiki
does.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sqlite3</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">panflute</span> <span class="kn">import</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ORG_ROAM_DB_PATH</span> <span class="o">=</span> <span class="s2">&#34;/home/justin/.org/brain/org-roam.db&#34;</span>
</span></span></code></pre></div><p>The constant for the org-roam db is necessary since I use org-roam, otherwise
unneeded. This only requires panflute as a third party library.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">prepare</span><span class="p">(</span><span class="n">doc</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Gets the title of the document and instantiates the list for appending</span>
</span></span><span class="line"><span class="cl">    <span class="n">doc</span><span class="o">.</span><span class="n">header</span> <span class="o">=</span> <span class="p">[</span><span class="sa">f</span><span class="s2">&#34;title: </span><span class="si">{</span><span class="n">stringify</span><span class="p">(</span><span class="n">doc</span><span class="o">.</span><span class="n">metadata</span><span class="p">[</span><span class="s1">&#39;title&#39;</span><span class="p">])</span><span class="si">}</span><span class="se">\n</span><span class="s2">type: text/vnd.tiddlywiki</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">]</span>
</span></span></code></pre></div><p>This is where you can set up global variables in the document. I use this to
store text in lists and as the initial part of the metadata, getting the header.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">sanitize_link</span><span class="p">(</span><span class="n">elem</span><span class="p">,</span> <span class="n">doc</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">    Reformats the links so they work in TiddlyWiki, MediaWiki naturally
</span></span></span><span class="line"><span class="cl"><span class="s1">    uses the [[]] syntax so this just does a lookup against the org-roam id
</span></span></span><span class="line"><span class="cl"><span class="s1">    and replace it with the title.
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">file_id</span> <span class="o">=</span> <span class="n">elem</span><span class="o">.</span><span class="n">url</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;:&#34;</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">cur</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">cursor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cur</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;select id, file, title from nodes where id = &#39;</span><span class="se">\&#34;</span><span class="si">{</span><span class="n">file_id</span><span class="si">}</span><span class="se">\&#34;</span><span class="s2">&#39;;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="n">fetchone</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">file_id</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">file_name</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">data</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">1</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">elem</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="n">file_name</span>
</span></span></code></pre></div><p>As mentioned above, I did borrow the code for this section, and modified it to
my needs (the original author exported to HTML directly). It looks up the
org-roam id: and replaces it with the title, since that&rsquo;s how I store my files
on my zettelkasten.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">metadata_parser</span><span class="p">(</span><span class="n">elem</span><span class="p">,</span> <span class="n">doc</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">    Parses the input element content to format it in
</span></span></span><span class="line"><span class="cl"><span class="s1">    a way that (my) TiddlyWiki understands.
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">    TODO: needs refactoring if it gets more complex
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">block</span> <span class="o">=</span> <span class="n">elem</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># transforming filetags -&gt; tags:</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">elem</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;#+filetags&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">text</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">block</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">6</span><span class="p">:]</span><span class="si">}</span><span class="s2"> </span><span class="si">{</span><span class="n">block</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">,</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># transforming created to: created, and format of YYYYMMDD</span>
</span></span><span class="line"><span class="cl">    <span class="k">elif</span> <span class="n">elem</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;#+created&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">text</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">block</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">2</span><span class="p">:]</span><span class="si">}</span><span class="s2"> </span><span class="si">{</span><span class="n">block</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">:]</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># transforming last_modified to modified, and format of YYYYMMDD</span>
</span></span><span class="line"><span class="cl">    <span class="k">elif</span> <span class="n">elem</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;#+last_modified&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">text</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">block</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="o">-</span><span class="mi">9</span><span class="p">:]</span><span class="si">}</span><span class="s2"> </span><span class="si">{</span><span class="n">block</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">:]</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">text</span> <span class="o">+</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span>
</span></span></code></pre></div><p>This is where things get a bit hairy, I essentially use this to parse the
associated RawBlock for org and return them as vanilla strings. All TiddlyWiki
tiddlers use this metadata. Eventually I&rsquo;d like to add more, things like
reading status and private/public depending on the underlying file. While I&rsquo;m
pretty sure this is not a good way to do it, it works.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">header_parser</span><span class="p">(</span><span class="n">elem</span><span class="p">,</span> <span class="n">doc</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">    TiddlyWiki uses !&#39;s for headers
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">s</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">elem</span><span class="o">.</span><span class="n">level</span> <span class="o">==</span> <span class="n">n</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">s</span> <span class="o">=</span> <span class="s1">&#39;!&#39;</span> <span class="o">*</span> <span class="n">n</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">s</span>
</span></span></code></pre></div><p>Prepending !&rsquo;s to MediaWiki headers, since TiddlyWiki uses ! while MediaWiki
uses =&rsquo;s.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="org-coderef--8846f0-1"><a class="lnlinks" href="#org-coderef--8846f0-1"> 1</a>
</span><span class="lnt" id="org-coderef--8846f0-2"><a class="lnlinks" href="#org-coderef--8846f0-2"> 2</a>
</span><span class="lnt" id="org-coderef--8846f0-3"><a class="lnlinks" href="#org-coderef--8846f0-3"> 3</a>
</span><span class="lnt" id="org-coderef--8846f0-4"><a class="lnlinks" href="#org-coderef--8846f0-4"> 4</a>
</span><span class="lnt" id="org-coderef--8846f0-5"><a class="lnlinks" href="#org-coderef--8846f0-5"> 5</a>
</span><span class="lnt" id="org-coderef--8846f0-6"><a class="lnlinks" href="#org-coderef--8846f0-6"> 6</a>
</span><span class="lnt" id="org-coderef--8846f0-7"><a class="lnlinks" href="#org-coderef--8846f0-7"> 7</a>
</span><span class="lnt" id="org-coderef--8846f0-8"><a class="lnlinks" href="#org-coderef--8846f0-8"> 8</a>
</span><span class="lnt" id="org-coderef--8846f0-9"><a class="lnlinks" href="#org-coderef--8846f0-9"> 9</a>
</span><span class="lnt" id="org-coderef--8846f0-10"><a class="lnlinks" href="#org-coderef--8846f0-10">10</a>
</span><span class="lnt" id="org-coderef--8846f0-11"><a class="lnlinks" href="#org-coderef--8846f0-11">11</a>
</span><span class="lnt" id="org-coderef--8846f0-12"><a class="lnlinks" href="#org-coderef--8846f0-12">12</a>
</span><span class="lnt" id="org-coderef--8846f0-13"><a class="lnlinks" href="#org-coderef--8846f0-13">13</a>
</span><span class="lnt" id="org-coderef--8846f0-14"><a class="lnlinks" href="#org-coderef--8846f0-14">14</a>
</span><span class="lnt" id="org-coderef--8846f0-15"><a class="lnlinks" href="#org-coderef--8846f0-15">15</a>
</span><span class="lnt" id="org-coderef--8846f0-16"><a class="lnlinks" href="#org-coderef--8846f0-16">16</a>
</span><span class="lnt" id="org-coderef--8846f0-17"><a class="lnlinks" href="#org-coderef--8846f0-17">17</a>
</span><span class="lnt" id="org-coderef--8846f0-18"><a class="lnlinks" href="#org-coderef--8846f0-18">18</a>
</span><span class="lnt" id="org-coderef--8846f0-19"><a class="lnlinks" href="#org-coderef--8846f0-19">19</a>
</span><span class="lnt" id="org-coderef--8846f0-20"><a class="lnlinks" href="#org-coderef--8846f0-20">20</a>
</span><span class="lnt" id="org-coderef--8846f0-21"><a class="lnlinks" href="#org-coderef--8846f0-21">21</a>
</span><span class="lnt" id="org-coderef--8846f0-22"><a class="lnlinks" href="#org-coderef--8846f0-22">22</a>
</span><span class="lnt" id="org-coderef--8846f0-23"><a class="lnlinks" href="#org-coderef--8846f0-23">23</a>
</span><span class="lnt" id="org-coderef--8846f0-24"><a class="lnlinks" href="#org-coderef--8846f0-24">24</a>
</span><span class="lnt" id="org-coderef--8846f0-25"><a class="lnlinks" href="#org-coderef--8846f0-25">25</a>
</span><span class="lnt" id="org-coderef--8846f0-26"><a class="lnlinks" href="#org-coderef--8846f0-26">26</a>
</span><span class="lnt" id="org-coderef--8846f0-27"><a class="lnlinks" href="#org-coderef--8846f0-27">27</a>
</span><span class="lnt" id="org-coderef--8846f0-28"><a class="lnlinks" href="#org-coderef--8846f0-28">28</a>
</span><span class="lnt" id="org-coderef--8846f0-29"><a class="lnlinks" href="#org-coderef--8846f0-29">29</a>
</span><span class="lnt" id="org-coderef--8846f0-30"><a class="lnlinks" href="#org-coderef--8846f0-30">30</a>
</span><span class="lnt" id="org-coderef--8846f0-31"><a class="lnlinks" href="#org-coderef--8846f0-31">31</a>
</span><span class="lnt" id="org-coderef--8846f0-32"><a class="lnlinks" href="#org-coderef--8846f0-32">32</a>
</span><span class="lnt" id="org-coderef--8846f0-33"><a class="lnlinks" href="#org-coderef--8846f0-33">33</a>
</span><span class="lnt" id="org-coderef--8846f0-34"><a class="lnlinks" href="#org-coderef--8846f0-34">34</a>
</span><span class="lnt" id="org-coderef--8846f0-35"><a class="lnlinks" href="#org-coderef--8846f0-35">35</a>
</span><span class="lnt" id="org-coderef--8846f0-36"><a class="lnlinks" href="#org-coderef--8846f0-36">36</a>
</span><span class="lnt" id="org-coderef--8846f0-37"><a class="lnlinks" href="#org-coderef--8846f0-37">37</a>
</span><span class="lnt" id="org-coderef--8846f0-38"><a class="lnlinks" href="#org-coderef--8846f0-38">38</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">action</span><span class="p">(</span><span class="n">elem</span><span class="p">,</span> <span class="n">doc</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">elem</span><span class="p">,</span> <span class="n">RawBlock</span><span class="p">)</span> <span class="ow">and</span> <span class="n">elem</span><span class="o">.</span><span class="n">format</span> <span class="o">==</span> <span class="s1">&#39;org&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># Filter for Org Block to reassemble into proper metadata</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># Not a fan of how I did this, but it works</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">elem</span><span class="o">.</span><span class="n">prev</span> <span class="o">==</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">elem</span><span class="o">.</span><span class="n">container</span><span class="p">))):</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">elem</span><span class="o">.</span><span class="n">offset</span><span class="p">(</span><span class="n">i</span><span class="p">),</span> <span class="n">RawBlock</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                        <span class="n">header</span> <span class="o">=</span> <span class="n">metadata_parser</span><span class="p">(</span><span class="n">elem</span><span class="o">.</span><span class="n">offset</span><span class="p">(</span><span class="n">i</span><span class="p">),</span> <span class="n">doc</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                        <span class="n">doc</span><span class="o">.</span><span class="n">header</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">header</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                        <span class="k">break</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">Para</span><span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="n">Str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">doc</span><span class="o">.</span><span class="n">header</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">elem</span><span class="p">,</span> <span class="n">Link</span><span class="p">)</span> <span class="ow">and</span> <span class="n">elem</span><span class="o">.</span><span class="n">url</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s2">&#34;id:&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">sanitize_link</span><span class="p">(</span><span class="n">elem</span><span class="p">,</span> <span class="n">doc</span><span class="p">)</span> <span class="c1">#                                     (sanitize2)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">elem</span><span class="p">,</span> <span class="n">Header</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">level_string</span> <span class="o">=</span> <span class="n">header_parser</span><span class="p">(</span><span class="n">elem</span><span class="p">,</span> <span class="n">doc</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">Para</span><span class="p">(</span><span class="n">RawInline</span><span class="p">(</span><span class="n">level_string</span> <span class="o">+</span> <span class="n">stringify</span><span class="p">(</span><span class="n">elem</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">None</span> <span class="c1">#a none action                                     (none action)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">finalize</span><span class="p">(</span><span class="n">doc</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">pass</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">doc</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">run_filter</span><span class="p">(</span><span class="n">action</span><span class="p">,</span> <span class="n">prepare</span><span class="p">,</span> <span class="n">finalize</span><span class="p">,</span> <span class="n">doc</span><span class="o">=</span><span class="n">doc</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">db</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">ORG_ROAM_DB_PATH</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">main</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>This is the meat n&rsquo; potatos of the code, so to speak. The run_filter takes an
&ldquo;action&rdquo; and goes down the AST provided by pandoc, using the rules associated
with the input/output format and the additional filter.</p>
<p>I basically:</p>
<ul>
<li>Look up the first element, make sure there&rsquo;s nothing behind that, then use
-that- to loop over the entire element container, stopping when there&rsquo;s no more RawBlocks.</li>
<li>I then parse the contents and add it to the header list. This then uses a list
comprehension to toss into a Paragraph using newlines to put them at the top like in the tiddlywiki example.</li>
<li>This then replaces each link type it encounters that starts with id:</li>
<li>Finally, it takes the extraneous header information and prepend&rsquo;s a !
depending on the header level.</li>
</ul>
<p>Most of my time was wasting understanding the Panflute API and how it interacted
with Pandoc. For example, I didn&rsquo;t realize at first to persist the data you
needed to essentially use the prepare functon and the doc class. And you need to
do modify/delete in the action function. (A <a href="#org-coderef--8846f0-26">none action</a> preserves an element and an empty
list [] performs a <a href="#org-coderef--e1bcfb-8">delete action</a>.)</p>
<p>Then we can finally do something like:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pandoc test.org -t mediawiki -f org -F main.py -o test.tid
</span></span></code></pre></div><p>and wrap it in a shell script to work on certain org-files.</p>
<p>I probably made this a bit harder on myself by not simply using the Lua filters,
but it was fun to learn something new and now I can programatically export my
org-roam files to TiddlyWiki. I won&rsquo;t be able to do as much fancy HTML as I&rsquo;d
like without writing more filters, but I figure it&rsquo;s good enough to get me to
start writing more notes.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Literate Kedro: Using Org-mode for Data Science</title>
      <link>https://justin.vc/posts/literate-kedro-spaceflight/</link>
      <pubDate>Mon, 25 Jul 2022 01:43:00 -0400</pubDate>
      
      <guid>https://justin.vc/posts/literate-kedro-spaceflight/</guid>
      <description>&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;This is both a general(ish) explainer and template(s) for usage in data science,
specifically utilizing (formerly) Quantum Black&amp;rsquo;s now open-source (Linux
Foundation) framework for creating &lt;span class=&#34;sidenote&#34;&gt;
&lt;label class=&#34;sidenote-label&#34; for=&#34;f1&#34;&gt;reproducible, maintainable, and modular data science code.&lt;/label&gt;
&lt;input class=&#34;sidenote-checkbox&#34; type=&#34;checkbox&#34; id=&#34;f1&#34;&gt;&lt;/input&gt;
&lt;span class=&#34;sidenote-content
sidenote-right&#34;&gt;  What does that mean? At its most simple it basically ties things into &amp;quot;nodes&amp;quot; and &amp;quot;pipelines&amp;quot;, where nodes are utility functions and functions that tie things together, and pipelines chain together multiple nodes, allowing for steps to be easily repeated. DAGs, they&amp;rsquo;re all the rage. &lt;/span&gt;
&lt;/span&gt;
Make sure to read their tutorial if you&amp;rsquo;re not
familiar with it, it&amp;rsquo;s good (and I won&amp;rsquo;t be covering nearly as much as there,
it&amp;rsquo;s under the assumption you&amp;rsquo;ve skimmed it):&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="summary">Summary</h2>
<p>This is both a general(ish) explainer and template(s) for usage in data science,
specifically utilizing (formerly) Quantum Black&rsquo;s now open-source (Linux
Foundation) framework for creating <span class="sidenote">
<label class="sidenote-label" for="f1">reproducible, maintainable, and modular data science code.</label>
<input class="sidenote-checkbox" type="checkbox" id="f1"></input>
<span class="sidenote-content
sidenote-right">  What does that mean? At its most simple it basically ties things into &quot;nodes&quot; and &quot;pipelines&quot;, where nodes are utility functions and functions that tie things together, and pipelines chain together multiple nodes, allowing for steps to be easily repeated. DAGs, they&rsquo;re all the rage. </span>
</span>
Make sure to read their tutorial if you&rsquo;re not
familiar with it, it&rsquo;s good (and I won&rsquo;t be covering nearly as much as there,
it&rsquo;s under the assumption you&rsquo;ve skimmed it):</p>
<p><a href="https://kedro.readthedocs.io/en/stable/tutorial/spaceflights_tutorial.html">https://kedro.readthedocs.io/en/stable/tutorial/spaceflights_tutorial.html</a></p>
<p>Some benefits you get using it with org-mode and emacs, however:</p>
<ul>
<li>Single file navigation / no need-to bounce around VSCode haphazardly when you
can jump between headers and tangle to the appropriate places.</li>
<li>Transition to a presentation from inside Org-mode seamlessly</li>
<li>Include data exploration and other documentation in the same file.</li>
<li>Other languages with org-babel</li>
</ul>
<p>Kedro uses a <a href="https://kedro.readthedocs.io/en/stable/tutorial/spaceflights_tutorial.html#kedro-project-development-workflow">specific workflow</a> which I will follow for this template/tutorial.</p>
<p>I&rsquo;m not entirely sure how useful this will be, but it allows me to get some
practice with org-babel and a project excuse to tinker around with kedro some
more in a use-case that I haven&rsquo;t seen.</p>
<p>This will be more of a &ldquo;update as I come up with new ideas&rdquo; type of article,
and, of course, if you see something that would be better served by a different
method, feel free to leave a comment / issue.</p>
<p><strong>Highlevel / TLDR</strong>: <em>This is for using org to config Kedro. Similar to using a monolithic org
file for configing emacs. Geared towards people who already use emacs and use
something like ivy/helm/vertico to traverse headings easily.</em></p>
<h3 id="assumptions">Assumptions</h3>
<ul>
<li>I&rsquo;m using conda for environment management (conda.el / jupyter-python)</li>
<li>You&rsquo;ve created the kedro project already since there&rsquo;s the y/n steps insofar
as telemetry, etc.
<ul>
<li>TODO: maybe put the steps here? Probably not worth the timesink insofar as a
template. The steps would 95% of the time be done in the command line but once.</li>
</ul>
</li>
</ul>
<h2 id="kedro-spaceflights-tutorial">Kedro Spaceflights Tutorial</h2>
<p><strong>Scenario:</strong> It is 2160 and the space tourism industry is booming. Globally,
thousands of space shuttle companies take tourists to the Moon and back. You
have been able to source amenities offered in each space shuttle, customer
reviews and company information.</p>
<p><strong>Project:</strong> You want to construct a model that predicts the price for each trip to
the Moon and the corresponding return flight.</p>
<h3 id="setup">Setup</h3>
<p>This is for environment setup, utility functions that you might not necessarily
want to put in your <code>init.el</code> or other things not directly related to the core of
the project.</p>
<h4 id="emacs-and-shell">Emacs and Shell</h4>
<!--list-separator-->
<ul>
<li>
<p>Elisp</p>
<p>Commands and utility functions that help reduce repeated code and make
the process more seamless. <span class="underline">Run manually with <code>C-c</code>  <code>C-c</code>.</span> One could alternatively
add this to their <code>init.el</code>.</p>
<p>The following code is used to prevent org-mode from complaining about the
variables. Otherwise you can set these as local variables in a real-life scenario.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">setq</span> <span class="nv">projdir</span> <span class="s">&#34;~/code/literate-kedro&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">setq</span> <span class="nv">projsub</span> <span class="s">&#34;/src/literate_kedro&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nf">print</span> <span class="nv">projdir</span><span class="p">)</span>
</span></span></code></pre></div></li>
</ul>
<!--list-separator-->
<ul>
<li>
<p>Shell / Other</p>
<p>If you plan on using the terminal for all shell commands, this isn&rsquo;t necessary.
You can simply activate your conda environment with <code>conda-env-activate</code> under the
assumption you&rsquo;re using <code>conda.el</code>. Because the session is set at the top level,
it should persist through the following commands. See the echo commands below confirming.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">conda activate kedro-example
</span></span></code></pre></div><p>Making sure I&rsquo;m in the correct directory / using the correct environment.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="k">$(</span>which pip<span class="k">)</span>
</span></span></code></pre></div></li>
</ul>
<h4 id="requirements-dot-txt">requirements.txt</h4>
<p>The requirements for the kedro project in the form of a</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cfg" data-lang="cfg"><span class="line"><span class="cl"><span class="na">black~</span><span class="o">=</span><span class="s">22.0</span>
</span></span><span class="line"><span class="cl"><span class="na">flake8&gt;</span><span class="o">=</span><span class="s">3.7.9, &lt;4.0</span>
</span></span><span class="line"><span class="cl"><span class="na">ipython&gt;</span><span class="o">=</span><span class="s">7.31.1, &lt;8.0</span>
</span></span><span class="line"><span class="cl"><span class="na">isort~</span><span class="o">=</span><span class="s">5.0</span>
</span></span><span class="line"><span class="cl"><span class="na">jupyter~</span><span class="o">=</span><span class="s">1.0</span>
</span></span><span class="line"><span class="cl"><span class="na">jupyterlab~</span><span class="o">=</span><span class="s">3.0</span>
</span></span><span class="line"><span class="cl"><span class="na">kedro[pandas.CSVDataSet, pandas.ExcelDataSet, pandas.ParquetDataSet, plotly.PlotlyDataSet, plotly.JSONDataSet]</span><span class="o">=</span><span class="s">=0.18.2</span>
</span></span><span class="line"><span class="cl"><span class="na">kedro-telemetry~</span><span class="o">=</span><span class="s">0.2.0</span>
</span></span><span class="line"><span class="cl"><span class="na">kedro-viz~</span><span class="o">=</span><span class="s">4.7</span>
</span></span><span class="line"><span class="cl"><span class="na">nbstripout~</span><span class="o">=</span><span class="s">0.4</span>
</span></span><span class="line"><span class="cl"><span class="na">pytest-cov~</span><span class="o">=</span><span class="s">3.0</span>
</span></span><span class="line"><span class="cl"><span class="na">pytest-mock&gt;</span><span class="o">=</span><span class="s">1.7.1, &lt;2.0</span>
</span></span><span class="line"><span class="cl"><span class="na">pytest~</span><span class="o">=</span><span class="s">6.2</span>
</span></span><span class="line"><span class="cl"><span class="na">scikit-learn~</span><span class="o">=</span><span class="s">1.0</span>
</span></span></code></pre></div><h4 id="configuration">Configuration</h4>
<p>The conf folder in kedro is for:</p>
<ul>
<li>Logging</li>
<li>Credentials</li>
<li>Other Sensitive/Personal content</li>
</ul>
<p>TODO: These are things that generally I would be more comfortable configuring outside
of org. You could probably get fancy with piping things with keys back and forth
but that remains outside of my scope for now.</p>
<p>You could probably get away with safely configing your logging here without
needing anything fancy.</p>
<!--list-separator-->
<ul>
<li>
<p>data_science.yml</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">data_science</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">active_modelling_pipeline</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">model_options</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">test_size</span><span class="p">:</span><span class="w"> </span><span class="m">0.2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">random_state</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">features</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">engines</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">passenger_capacity</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">crew</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">d_check_complete</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">moon_clearance_complete</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">iata_approved</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">company_rating</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">review_scores_rating</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">candidate_modelling_pipeline</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">model_options</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">test_size</span><span class="p">:</span><span class="w"> </span><span class="m">0.2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">random_state</span><span class="p">:</span><span class="w"> </span><span class="m">8</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">features</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">engines</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">passenger_capacity</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">crew</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">review_scores_rating</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">data_processing.companies_columns</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">tracking.JSONDataSet</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">filepath</span><span class="p">:</span><span class="w"> </span><span class="l">data/09_tracking/companies_columns.json</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">data_science.active_modelling_pipeline.metrics</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">tracking.MetricsDataSet</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">filepath</span><span class="p">:</span><span class="w"> </span><span class="l">data/09_tracking/metrics.json</span><span class="w">
</span></span></span></code></pre></div></li>
</ul>
<!--list-separator-->
<ul>
<li>
<p>settings.py</p>
<p>Normally you don&rsquo;t edit this, but there&rsquo;s some cases where it&rsquo;s necessary. This
is for storing metrics in a sqlite database.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">kedro_viz.integrations.kedro.sqlite_store</span> <span class="kn">import</span> <span class="n">SQLiteStore</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">SESSION_STORE_CLASS</span> <span class="o">=</span> <span class="n">SQLiteStore</span>
</span></span><span class="line"><span class="cl"><span class="n">SESSION_STORE_ARGS</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;path&#34;</span><span class="p">:</span> <span class="nb">str</span><span class="p">(</span><span class="n">Path</span><span class="p">(</span><span class="vm">__file__</span><span class="p">)</span><span class="o">.</span><span class="n">parents</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">/</span> <span class="s2">&#34;data&#34;</span><span class="p">)}</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="data">Data</h3>
<p>The second part of the kedro workflow is the data phase, which involves adding
data to the <code>data</code> folder, and then referencing the datasets for the project in
the <code>conf/base/catalog.yml</code> file.</p>
<h4 id="preparation">Preparation</h4>
<p>Steps involved in acquiring / registering the data to the appropriate
catalog(s). You could explain the business case or variables also.</p>
<!--list-separator-->
<ul>
<li>
<p>Acquisition</p>
<p>In some cases data is easily acquired with a curl/wget, specifically forone-off
analyses. It can also be helpful to show where you downloaded your data.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mkdir -p <span class="nv">$directory</span>/
</span></span><span class="line"><span class="cl"><span class="c1">#reviews</span>
</span></span><span class="line"><span class="cl">curl -o <span class="s2">&#34;</span><span class="nv">$directory</span><span class="s2">/reviews.csv&#34;</span> https://kedro-org.github.io/kedro/reviews.csv
</span></span><span class="line"><span class="cl"><span class="c1"># companies</span>
</span></span><span class="line"><span class="cl">curl -o <span class="s2">&#34;</span><span class="nv">$directory</span><span class="s2">/companies.csv&#34;</span> https://kedro-org.github.io/kedro/companies.csv
</span></span><span class="line"><span class="cl"><span class="c1"># shuttles</span>
</span></span><span class="line"><span class="cl">curl -o <span class="s2">&#34;</span><span class="nv">$directory</span><span class="s2">/shuttles.xlsx&#34;</span> https://kedro-org.github.io/kedro/shuttles.xlsx
</span></span></code></pre></div></li>
</ul>
<!--list-separator-->
<ul>
<li>
<p>Data Registration</p>
 <!--list-separator-->
<ul>
<li>
<p>catalog.yml</p>
<p>You now need to register the datasets so they can be loaded by Kedro. All Kedro
projects have a <code>conf/base/catalog.yml</code>. file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">companies</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">pandas.CSVDataSet</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">filepath</span><span class="p">:</span><span class="w"> </span><span class="l">data/01_raw/companies.csv</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">layer</span><span class="p">:</span><span class="w"> </span><span class="l">raw</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">reviews</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">pandas.CSVDataSet</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">filepath</span><span class="p">:</span><span class="w"> </span><span class="l">data/01_raw/reviews.csv</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">layer</span><span class="p">:</span><span class="w"> </span><span class="l">raw</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">shuttles</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">pandas.ExcelDataSet</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">filepath</span><span class="p">:</span><span class="w"> </span><span class="l">data/01_raw/shuttles.xlsx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">layer</span><span class="p">:</span><span class="w"> </span><span class="l">raw</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">data_processing.preprocessed_companies</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">pandas.ParquetDataSet</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">filepath</span><span class="p">:</span><span class="w"> </span><span class="l">data/02_intermediate/preprocessed_companies.pq</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">layer</span><span class="p">:</span><span class="w"> </span><span class="l">intermediate</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">data_processing.preprocessed_shuttles</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">pandas.ParquetDataSet</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">filepath</span><span class="p">:</span><span class="w"> </span><span class="l">data/02_intermediate/preprocessed_shuttles.pq</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">layer</span><span class="p">:</span><span class="w"> </span><span class="l">intermediate</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">model_input_table</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">pandas.ParquetDataSet</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">filepath</span><span class="p">:</span><span class="w"> </span><span class="l">data/03_primary/model_input_table.pq</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">layer</span><span class="p">:</span><span class="w"> </span><span class="l">primary</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">data_science.active_modelling_pipeline.regressor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">pickle.PickleDataSet</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">filepath</span><span class="p">:</span><span class="w"> </span><span class="l">data/06_models/regressor_active.pickle</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">versioned</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">layer</span><span class="p">:</span><span class="w"> </span><span class="l">models</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">data_science.candidate_modelling_pipeline.regressor</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">pickle.PickleDataSet</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">filepath</span><span class="p">:</span><span class="w"> </span><span class="l">data/06_models/regressor_candidate.pickle</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">versioned</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">layer</span><span class="p">:</span><span class="w"> </span><span class="l">models</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">data_science.active_modelling_pipeline.metrics</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">tracking.MetricsDataSet</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">filepath</span><span class="p">:</span><span class="w"> </span><span class="l">data/09_tracking/metrics.json</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">data_processing.companies_columns</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">tracking.JSONDataSet</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">filepath</span><span class="p">:</span><span class="w"> </span><span class="l">data/09_tracking/companies_columns.json</span><span class="w">
</span></span></span></code></pre></div></li>
</ul>
</li>
</ul>
<h3 id="pipelines">Pipelines</h3>
<p>These are the node functions associated with the data_processing pipeline.</p>
<blockquote>
<p>In many typical Kedro projects, a single (“main”) pipeline
increases in complexity as the project evolves. To keep your
project fit for purpose, you can create modular pipelines, which
are logically isolated and can be reused. Modular pipelines are
easier to develop, test and maintain, and are portable so they can
be copied and reused between projects.</p>
</blockquote>
<!--list-separator-->
<ul>
<li>
<p>data_processing</p>
<p>This pipeline is for processing the data.</p>
 <!--list-separator-->
<ul>
<li>
<p>nodes.py</p>
<blockquote>
<p>A Kedro node is a wrapper for a Python function that names the inputs
and outputs of that function. It is the building block of a pipeline.
Nodes can be linked when the output of one node is the input of another.</p>
</blockquote>
<p>NOTE: Could theoretically break this into seperate codeblocks (import, utility,
preprocess, but might be a bit cumbersome. Input welcome for best practices.)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Tuple</span><span class="p">,</span> <span class="n">Dict</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">_is_true</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">x</span> <span class="o">==</span> <span class="s2">&#34;t&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">_parse_percentage</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34;%&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span> <span class="o">/</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">x</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">_parse_money</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34;$&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">str</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34;,&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">x</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">preprocess_companies</span><span class="p">(</span><span class="n">companies</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">,</span> <span class="n">Dict</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Preprocesses the data for companies.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        companies: Raw data.
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        Preprocessed data, with `company_rating` converted to a float and
</span></span></span><span class="line"><span class="cl"><span class="s2">        `iata_approved` converted to boolean.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">companies</span><span class="p">[</span><span class="s2">&#34;iata_approved&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">_is_true</span><span class="p">(</span><span class="n">companies</span><span class="p">[</span><span class="s2">&#34;iata_approved&#34;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">companies</span><span class="p">[</span><span class="s2">&#34;company_rating&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">_parse_percentage</span><span class="p">(</span><span class="n">companies</span><span class="p">[</span><span class="s2">&#34;company_rating&#34;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">companies</span><span class="p">,</span> <span class="p">{</span><span class="s2">&#34;columns&#34;</span><span class="p">:</span> <span class="n">companies</span><span class="o">.</span><span class="n">columns</span><span class="o">.</span><span class="n">tolist</span><span class="p">(),</span> <span class="s2">&#34;data_type&#34;</span><span class="p">:</span> <span class="s2">&#34;companies&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">preprocess_shuttles</span><span class="p">(</span><span class="n">shuttles</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Preprocesses the data for shuttles.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        shuttles: Raw data.
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        Preprocessed data, with `price` converted to a float and `d_check_complete`,
</span></span></span><span class="line"><span class="cl"><span class="s2">        `moon_clearance_complete` converted to boolean.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">shuttles</span><span class="p">[</span><span class="s2">&#34;d_check_complete&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">_is_true</span><span class="p">(</span><span class="n">shuttles</span><span class="p">[</span><span class="s2">&#34;d_check_complete&#34;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">shuttles</span><span class="p">[</span><span class="s2">&#34;moon_clearance_complete&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">_is_true</span><span class="p">(</span><span class="n">shuttles</span><span class="p">[</span><span class="s2">&#34;moon_clearance_complete&#34;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">shuttles</span><span class="p">[</span><span class="s2">&#34;price&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">_parse_money</span><span class="p">(</span><span class="n">shuttles</span><span class="p">[</span><span class="s2">&#34;price&#34;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">shuttles</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_model_input_table</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">shuttles</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">,</span> <span class="n">companies</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">,</span> <span class="n">reviews</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Combines all data to create a model input table.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        shuttles: Preprocessed data for shuttles.
</span></span></span><span class="line"><span class="cl"><span class="s2">        companies: Preprocessed data for companies.
</span></span></span><span class="line"><span class="cl"><span class="s2">        reviews: Raw data for reviews.
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        model input table.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">rated_shuttles</span> <span class="o">=</span> <span class="n">shuttles</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">reviews</span><span class="p">,</span> <span class="n">left_on</span><span class="o">=</span><span class="s2">&#34;id&#34;</span><span class="p">,</span> <span class="n">right_on</span><span class="o">=</span><span class="s2">&#34;shuttle_id&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">model_input_table</span> <span class="o">=</span> <span class="n">rated_shuttles</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">companies</span><span class="p">,</span> <span class="n">left_on</span><span class="o">=</span><span class="s2">&#34;company_id&#34;</span><span class="p">,</span> <span class="n">right_on</span><span class="o">=</span><span class="s2">&#34;id&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">model_input_table</span> <span class="o">=</span> <span class="n">model_input_table</span><span class="o">.</span><span class="n">dropna</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">model_input_table</span>
</span></span></code></pre></div></li>
</ul>
 <!--list-separator-->
<ul>
<li>
<p>pipeline.py</p>
<blockquote>
<p>A Kedro pipeline organises the dependencies and execution order of a collection
of nodes, and connects inputs and outputs. The pipeline determines the node
execution order by resolving dependencies.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">kedro.pipeline</span> <span class="kn">import</span> <span class="n">Pipeline</span><span class="p">,</span> <span class="n">node</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">kedro.pipeline.modular_pipeline</span> <span class="kn">import</span> <span class="n">pipeline</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">.nodes</span> <span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">preprocess_companies</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">preprocess_shuttles</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">create_model_input_table</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_pipeline</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Pipeline</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">pipeline</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="n">node</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">func</span><span class="o">=</span><span class="n">preprocess_companies</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">inputs</span><span class="o">=</span><span class="s2">&#34;companies&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">outputs</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;preprocessed_companies&#34;</span><span class="p">,</span><span class="s2">&#34;companies_columns&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">                <span class="n">name</span><span class="o">=</span><span class="s2">&#34;preprocess_companies_node&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">node</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">func</span><span class="o">=</span><span class="n">preprocess_shuttles</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">inputs</span><span class="o">=</span><span class="s2">&#34;shuttles&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">outputs</span><span class="o">=</span><span class="s2">&#34;preprocessed_shuttles&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">name</span><span class="o">=</span><span class="s2">&#34;preprocess_shuttles_node&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">node</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">func</span><span class="o">=</span><span class="n">create_model_input_table</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;preprocessed_shuttles&#34;</span><span class="p">,</span> <span class="s2">&#34;preprocessed_companies&#34;</span><span class="p">,</span> <span class="s2">&#34;reviews&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">                <span class="n">outputs</span><span class="o">=</span><span class="s2">&#34;model_input_table&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">name</span><span class="o">=</span><span class="s2">&#34;create_model_input_table_node&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">),</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="n">namespace</span><span class="o">=</span><span class="s2">&#34;data_processing&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;companies&#34;</span><span class="p">,</span> <span class="s2">&#34;shuttles&#34;</span><span class="p">,</span> <span class="s2">&#34;reviews&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="n">outputs</span><span class="o">=</span><span class="s2">&#34;model_input_table&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span></code></pre></div></li>
</ul>
</li>
</ul>
<!--list-separator-->
<ul>
<li>
<p>data_science</p>
<p>This pipeline is for performing data science on the data previously processed.</p>
 <!--list-separator-->
<ul>
<li>
<p>nodes.py</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">logging</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Tuple</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sklearn.linear_model</span> <span class="kn">import</span> <span class="n">LinearRegression</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sklearn.metrics</span> <span class="kn">import</span> <span class="n">r2_score</span><span class="p">,</span> <span class="n">mean_absolute_error</span><span class="p">,</span> <span class="n">max_error</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">split_data</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">,</span> <span class="n">parameters</span><span class="p">:</span> <span class="n">Dict</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Splits data into features and targets training and test sets.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        data: Data containing features and target.
</span></span></span><span class="line"><span class="cl"><span class="s2">        parameters: Parameters defined in parameters/data_science.yml.
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        Split data.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">X</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">parameters</span><span class="p">[</span><span class="s2">&#34;features&#34;</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl">    <span class="n">y</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s2">&#34;price&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">test_size</span><span class="o">=</span><span class="n">parameters</span><span class="p">[</span><span class="s2">&#34;test_size&#34;</span><span class="p">],</span> <span class="n">random_state</span><span class="o">=</span><span class="n">parameters</span><span class="p">[</span><span class="s2">&#34;random_state&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">train_model</span><span class="p">(</span><span class="n">X_train</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">,</span> <span class="n">y_train</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">LinearRegression</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Trains the linear regression model.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        X_train: Training data of independent features.
</span></span></span><span class="line"><span class="cl"><span class="s2">        y_train: Training data for price.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        Trained model.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">regressor</span> <span class="o">=</span> <span class="n">LinearRegression</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">regressor</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">regressor</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">evaluate_model</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">regressor</span><span class="p">:</span> <span class="n">LinearRegression</span><span class="p">,</span> <span class="n">X_test</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">,</span> <span class="n">y_test</span><span class="p">:</span> <span class="n">pd</span><span class="o">.</span><span class="n">Series</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">float</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Calculates and logs the coefficient of determination.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        regressor: Trained model.
</span></span></span><span class="line"><span class="cl"><span class="s2">        X_test: Testing data of independent features.
</span></span></span><span class="line"><span class="cl"><span class="s2">        y_test: Testing data for price.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">y_pred</span> <span class="o">=</span> <span class="n">regressor</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">score</span> <span class="o">=</span> <span class="n">r2_score</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">mae</span> <span class="o">=</span> <span class="n">mean_absolute_error</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">me</span> <span class="o">=</span> <span class="n">max_error</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">logger</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">getLogger</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&#34;Model has a coefficient R^2 of </span><span class="si">%.3f</span><span class="s2"> on test data.&#34;</span><span class="p">,</span> <span class="n">score</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span><span class="s2">&#34;r2_score&#34;</span><span class="p">:</span> <span class="n">score</span><span class="p">,</span> <span class="s2">&#34;mae&#34;</span><span class="p">:</span> <span class="n">mae</span><span class="p">,</span> <span class="s2">&#34;max_error&#34;</span><span class="p">:</span> <span class="n">me</span><span class="p">}</span>
</span></span></code></pre></div></li>
</ul>
 <!--list-separator-->
<ul>
<li>
<p>pipeline.py</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">kedro.pipeline</span> <span class="kn">import</span> <span class="n">Pipeline</span><span class="p">,</span> <span class="n">node</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">kedro.pipeline.modular_pipeline</span> <span class="kn">import</span> <span class="n">pipeline</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">.nodes</span> <span class="kn">import</span> <span class="n">evaluate_model</span><span class="p">,</span> <span class="n">split_data</span><span class="p">,</span> <span class="n">train_model</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">create_pipeline</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Pipeline</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">pipeline_instance</span> <span class="o">=</span> <span class="n">pipeline</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="n">node</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">func</span><span class="o">=</span><span class="n">split_data</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;model_input_table&#34;</span><span class="p">,</span> <span class="s2">&#34;params:model_options&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">                <span class="n">outputs</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;X_train&#34;</span><span class="p">,</span> <span class="s2">&#34;X_test&#34;</span><span class="p">,</span> <span class="s2">&#34;y_train&#34;</span><span class="p">,</span> <span class="s2">&#34;y_test&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">                <span class="n">name</span><span class="o">=</span><span class="s2">&#34;split_data_node&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">node</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">func</span><span class="o">=</span><span class="n">train_model</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;X_train&#34;</span><span class="p">,</span> <span class="s2">&#34;y_train&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">                <span class="n">outputs</span><span class="o">=</span><span class="s2">&#34;regressor&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">name</span><span class="o">=</span><span class="s2">&#34;train_model_node&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">node</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">func</span><span class="o">=</span><span class="n">evaluate_model</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">inputs</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;regressor&#34;</span><span class="p">,</span> <span class="s2">&#34;X_test&#34;</span><span class="p">,</span> <span class="s2">&#34;y_test&#34;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">                <span class="n">outputs</span><span class="o">=</span><span class="s2">&#34;metrics&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="n">name</span><span class="o">=</span><span class="s2">&#34;evaluate_model_node&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">ds_pipeline_1</span> <span class="o">=</span> <span class="n">pipeline</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">pipe</span><span class="o">=</span><span class="n">pipeline_instance</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">inputs</span><span class="o">=</span><span class="s2">&#34;model_input_table&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">namespace</span><span class="o">=</span><span class="s2">&#34;active_modelling_pipeline&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">ds_pipeline_2</span> <span class="o">=</span> <span class="n">pipeline</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">pipe</span><span class="o">=</span><span class="n">pipeline_instance</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">inputs</span><span class="o">=</span><span class="s2">&#34;model_input_table&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">namespace</span><span class="o">=</span><span class="s2">&#34;candidate_modelling_pipeline&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">pipeline</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">pipe</span><span class="o">=</span><span class="n">ds_pipeline_1</span> <span class="o">+</span> <span class="n">ds_pipeline_2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">inputs</span><span class="o">=</span><span class="s2">&#34;model_input_table&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">namespace</span><span class="o">=</span><span class="s2">&#34;data_science&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span></code></pre></div></li>
</ul>
</li>
</ul>
<!--list-separator-->
<ul>
<li>
<p>pipeline_registry.py</p>
<p>This is the pipeline registry, where you add the appropriate pipelines defined
further down into the register function. This is how kedro recognizes which
pipelines to run.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Dict</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">kedro.pipeline</span> <span class="kn">import</span> <span class="n">Pipeline</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">literate_kedro.pipelines</span> <span class="kn">import</span> <span class="n">data_processing</span> <span class="k">as</span> <span class="n">dp</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">literate_kedro.pipelines</span> <span class="kn">import</span> <span class="n">data_science</span> <span class="k">as</span> <span class="n">ds</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">register_pipelines</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Pipeline</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Register the project&#39;s pipelines.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        A mapping from a pipeline name to a ``Pipeline`` object.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">data_processing_pipeline</span> <span class="o">=</span> <span class="n">dp</span><span class="o">.</span><span class="n">create_pipeline</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">data_science_pipeline</span> <span class="o">=</span> <span class="n">ds</span><span class="o">.</span><span class="n">create_pipeline</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;__default__&#34;</span><span class="p">:</span> <span class="n">data_processing_pipeline</span> <span class="o">+</span> <span class="n">data_science_pipeline</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;dp&#34;</span><span class="p">:</span> <span class="n">data_processing_pipeline</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;ds&#34;</span><span class="p">:</span> <span class="n">data_science_pipeline</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="conclusions">Conclusions</h2>
<p>This is pretty much all you need to replicate the kedro tutorial from within a
single org-file. I would be remiss to not mention that kedro itself has a pretty
good alternative of simply using their jupyter plugin, but I tend to use emacs
all the time anyways, so I figured, what the hey.</p>
<p>There are still a couple things I&rsquo;d like to ponder over insofar as best
practices and future articles like:</p>
<ul>
<li>Should you split up the nodes and pipelines further? Using literate
programmign to basically make a utility, processing, etc. code block.</li>
<li>Version control, only on the tangled files?</li>
<li>Making use of transclusion from other files.</li>
<li>Turning the &ldquo;relevant parts&rdquo;&rsquo;  into a presentation - slicing the org document
into exploratory analysis that ignores the code depending on audience.</li>
</ul>
<p>I&rsquo;ll probably try to write an article doing a &ldquo;real&rdquo; analysis with this workflow
in the future.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">cp ./literate-kedro-spaceflight.org ~/code/justin.vc/static/org/literate-kedro-spaceflight.org
</span></span></code></pre></div><p>This copies the file when I export, which allows you to see the
<a href="https://raw.githubusercontent.com/brickfrog/justin.vc/master/static/org/literate-kedro-spaceflight.org">original org file</a> if curious. That specifically includes how I tangled the files to the
correct places. (And, once again, input welcome if I there&rsquo;s better ways to do it).</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Using ox-hugo and Org-roam for Writing</title>
      <link>https://justin.vc/posts/ox-hugo-and-org-roam/</link>
      <pubDate>Sat, 16 Jul 2022 02:31:00 -0400</pubDate>
      
      <guid>https://justin.vc/posts/ox-hugo-and-org-roam/</guid>
      <description>&lt;p&gt;Do you like emacs and try to use it for as much as possible? Do you like static
site generators? Then this post may be of relevance to you.&lt;/p&gt;
&lt;p&gt;If this all sounds greek to you, and you somehow
wandered into here randomly, hoo-boy do I have a fun rabbit hole for you:
&lt;a href=&#34;https:www.youtube.com/watch?v=rCMh7srOqvw&#34;&gt;Getting started with Emacs Doom&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;okay-but-why&#34;&gt;Okay, But Why?&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;High-level: I really like emacs and writing notes in org-roam, and didn&amp;rsquo;t want
to introduce mental overhead by writing things elsewhere. But I -also- don&amp;rsquo;t
like how the default mode in ox-hugo is a monolithic org file.&lt;/em&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Do you like emacs and try to use it for as much as possible? Do you like static
site generators? Then this post may be of relevance to you.</p>
<p>If this all sounds greek to you, and you somehow
wandered into here randomly, hoo-boy do I have a fun rabbit hole for you:
<a href="https:www.youtube.com/watch?v=rCMh7srOqvw">Getting started with Emacs Doom</a>.</p>
<h2 id="okay-but-why">Okay, But Why?</h2>
<p><em>High-level: I really like emacs and writing notes in org-roam, and didn&rsquo;t want
to introduce mental overhead by writing things elsewhere. But I -also- don&rsquo;t
like how the default mode in ox-hugo is a monolithic org file.</em></p>
<p>For the longest (okay, not -that- long) I tried to use
<a href="https://www.tiddlywiki.com">TiddlyWiki</a> for most of my writing, both long and short form. This works well for
<a href="https://zettelkasten.de/posts/overview/">Zettelkasten</a> style notes, but I felt like it didn&rsquo;t work out that well for
anything other than atomic notes. Add to the fact that it&rsquo;s a bit difficult to
edit/make new notes easily outside of TiddlyWiki, I decided to move my
note-taking to org-mode and emacs.</p>
<p>I&rsquo;m not a strict FOSS purist, so I still tend
to like glamming things up with javascript (other people&rsquo;s javascript), but I just love how fun it is to
tinker with emacs configs. I still plan on using TiddlyWiki as display
for my zettelkasten, but I wanted something nicer for my tutorials, portfolios,
<span class="sidenote">
<label class="sidenote-label" for="f1">articles, and such.</label>
<input class="sidenote-checkbox" type="checkbox" id="f1"></input>
<span class="sidenote-content
sidenote-right">  What articles? Rude. </span>
</span></p>
<p>I was aware of
<a href="https://www.orgroam.com">Org-roam</a> due to sheer popularity / stars on github and I decided to try it out.
I&rsquo;m (as of writing) not currently using anything super fancy, I&rsquo;ve basically
adapted Jethro Kuan&rsquo;s <a href="https://jethrokuan.github.io/org-roam-guide">guide</a> on taking notes. I figured that since he created the
thing, he&rsquo;d be a good template to follow. I reccomend skimming his article for
the basics if you&rsquo;re new to this.</p>
<p>The second key part of this is <a href="https://ox-hugo.scripter.co/">ox-hugo</a>, which can export .org files into
markdown, which are served by hugo, a popular static-site generator. I&rsquo;m
not entirely sure if there&rsquo;s any other options, but ox-hugo is by far the most
popular that I could find, with easy setup and theming.</p>
<p>The basic workflow idea is, for any <code>article</code> capture, add the appropriate hugo
headers and export to markdown to build your site. Simple as that. I&rsquo;ll go into
a bit more detail further down, but it really is that simple. I got my site
working in less than an hour. I spent most of my time tinkering around with
the javascript to get it looking like how I wanted to. But, also, a lot of the neat
stuff I liked from TiddyWiki is pretty replicatable out-of-the-box depending on theming.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<h2 id="getting-started">Getting Started</h2>
<p>I use <a href="https://doomemacs.org">Doom Emacs</a>, which makes setup easy. You simply need to enable the
appropriate sections in doom&rsquo;s <code>init.el</code>. It shouldn&rsquo;t be too difficult to do this
in vanilla emacs, but I leave that as an exercise to the reader.</p>
<figure>
    <img loading="lazy" src="/images/orgdoom.png"
         alt="org language section of doom emac&#39;s init.el"/> <figcaption>
            Doom Emacs&#39; org-language init.el
        </figcaption>
</figure>

<h3 id="config-settings">Config Settings</h3>
<p>This is really the main part of the workflow. The key thing to note that is that
ox-hugo would prefer you to do everything in a monolithic org file, essentially
treating each heading as an article. That kind of conflicts with how Jethro does
his notes as I understood things.</p>
<p>But, no worries, I say! It&rsquo;s simple to just use the org-templates
to capture the needed tags. (And most of the benefits of monolith aren&rsquo;t as
helpful unless writing successions of articles where inheriting headers is important.)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="org-coderef--ed0192-1"><a class="lnlinks" href="#org-coderef--ed0192-1"> 1</a>
</span><span class="lnt" id="org-coderef--ed0192-2"><a class="lnlinks" href="#org-coderef--ed0192-2"> 2</a>
</span><span class="lnt" id="org-coderef--ed0192-3"><a class="lnlinks" href="#org-coderef--ed0192-3"> 3</a>
</span><span class="lnt" id="org-coderef--ed0192-4"><a class="lnlinks" href="#org-coderef--ed0192-4"> 4</a>
</span><span class="lnt" id="org-coderef--ed0192-5"><a class="lnlinks" href="#org-coderef--ed0192-5"> 5</a>
</span><span class="lnt" id="org-coderef--ed0192-6"><a class="lnlinks" href="#org-coderef--ed0192-6"> 6</a>
</span><span class="lnt" id="org-coderef--ed0192-7"><a class="lnlinks" href="#org-coderef--ed0192-7"> 7</a>
</span><span class="lnt" id="org-coderef--ed0192-8"><a class="lnlinks" href="#org-coderef--ed0192-8"> 8</a>
</span><span class="lnt" id="org-coderef--ed0192-9"><a class="lnlinks" href="#org-coderef--ed0192-9"> 9</a>
</span><span class="lnt" id="org-coderef--ed0192-10"><a class="lnlinks" href="#org-coderef--ed0192-10">10</a>
</span><span class="lnt" id="org-coderef--ed0192-11"><a class="lnlinks" href="#org-coderef--ed0192-11">11</a>
</span><span class="lnt" id="org-coderef--ed0192-12"><a class="lnlinks" href="#org-coderef--ed0192-12">12</a>
</span><span class="lnt" id="org-coderef--ed0192-13"><a class="lnlinks" href="#org-coderef--ed0192-13">13</a>
</span><span class="lnt" id="org-coderef--ed0192-14"><a class="lnlinks" href="#org-coderef--ed0192-14">14</a>
</span><span class="lnt" id="org-coderef--ed0192-15"><a class="lnlinks" href="#org-coderef--ed0192-15">15</a>
</span><span class="lnt" id="org-coderef--ed0192-16"><a class="lnlinks" href="#org-coderef--ed0192-16">16</a>
</span><span class="lnt" id="org-coderef--ed0192-17"><a class="lnlinks" href="#org-coderef--ed0192-17">17</a>
</span><span class="lnt" id="org-coderef--ed0192-18"><a class="lnlinks" href="#org-coderef--ed0192-18">18</a>
</span><span class="lnt" id="org-coderef--ed0192-19"><a class="lnlinks" href="#org-coderef--ed0192-19">19</a>
</span><span class="lnt" id="org-coderef--ed0192-20"><a class="lnlinks" href="#org-coderef--ed0192-20">20</a>
</span><span class="lnt" id="org-coderef--ed0192-21"><a class="lnlinks" href="#org-coderef--ed0192-21">21</a>
</span><span class="lnt" id="org-coderef--ed0192-22"><a class="lnlinks" href="#org-coderef--ed0192-22">22</a>
</span><span class="lnt" id="org-coderef--ed0192-23"><a class="lnlinks" href="#org-coderef--ed0192-23">23</a>
</span><span class="lnt" id="org-coderef--ed0192-24"><a class="lnlinks" href="#org-coderef--ed0192-24">24</a>
</span><span class="lnt" id="org-coderef--ed0192-25"><a class="lnlinks" href="#org-coderef--ed0192-25">25</a>
</span><span class="lnt" id="org-coderef--ed0192-26"><a class="lnlinks" href="#org-coderef--ed0192-26">26</a>
</span><span class="lnt" id="org-coderef--ed0192-27"><a class="lnlinks" href="#org-coderef--ed0192-27">27</a>
</span><span class="lnt" id="org-coderef--ed0192-28"><a class="lnlinks" href="#org-coderef--ed0192-28">28</a>
</span><span class="lnt" id="org-coderef--ed0192-29"><a class="lnlinks" href="#org-coderef--ed0192-29">29</a>
</span><span class="lnt" id="org-coderef--ed0192-30"><a class="lnlinks" href="#org-coderef--ed0192-30">30</a>
</span><span class="lnt" id="org-coderef--ed0192-31"><a class="lnlinks" href="#org-coderef--ed0192-31">31</a>
</span><span class="lnt" id="org-coderef--ed0192-32"><a class="lnlinks" href="#org-coderef--ed0192-32">32</a>
</span><span class="lnt" id="org-coderef--ed0192-33"><a class="lnlinks" href="#org-coderef--ed0192-33">33</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span class="line"><span class="cl"><span class="c1">;; config.el, setting templates for org-roam</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nb">setq</span> <span class="nv">org-roam-capture-templates</span>
</span></span><span class="line"><span class="cl">      <span class="o">&#39;</span><span class="p">((</span><span class="s">&#34;m&#34;</span> <span class="s">&#34;main&#34;</span> <span class="nv">plain</span>
</span></span><span class="line"><span class="cl">         <span class="s">&#34;%?&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="nb">:if-new</span>
</span></span><span class="line"><span class="cl">         <span class="p">(</span><span class="nv">file+head</span> <span class="s">&#34;main/${slug}.org&#34;</span>
</span></span><span class="line"><span class="cl">          <span class="s">&#34;#+title: ${title}
</span></span></span><span class="line"><span class="cl"><span class="s">          #+created: %U
</span></span></span><span class="line"><span class="cl"><span class="s">          #+last_modified: %U\n\n&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">         <span class="nb">:immediate-finish</span> <span class="no">t</span>
</span></span><span class="line"><span class="cl">         <span class="nb">:unnarrowed</span> <span class="no">t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="s">&#34;r&#34;</span> <span class="s">&#34;reference&#34;</span> <span class="nv">plain</span>
</span></span><span class="line"><span class="cl">         <span class="s">&#34;%?&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="nb">:if-new</span>
</span></span><span class="line"><span class="cl">         <span class="p">(</span><span class="nv">file+head</span> <span class="s">&#34;reference/${title}.org&#34;</span>
</span></span><span class="line"><span class="cl">                    <span class="s">&#34;#+title: ${title}
</span></span></span><span class="line"><span class="cl"><span class="s">                    #+created: %U
</span></span></span><span class="line"><span class="cl"><span class="s">                    #+last_modified: %U\n\n&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">         <span class="nb">:immediate-finish</span> <span class="no">t</span>
</span></span><span class="line"><span class="cl">         <span class="nb">:unnarrowed</span> <span class="no">t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="s">&#34;a&#34;</span> <span class="s">&#34;article&#34;</span> <span class="nv">plain</span>             <span class="c1">;;                (article)</span>
</span></span><span class="line"><span class="cl">         <span class="s">&#34;%?&#34;</span>
</span></span><span class="line"><span class="cl">         <span class="nb">:if-new</span>
</span></span><span class="line"><span class="cl">         <span class="p">(</span><span class="nv">file+head</span> <span class="s">&#34;articles/${title}.org&#34;</span>
</span></span><span class="line"><span class="cl">                   <span class="s">&#34;#+HUGO_BASE_DIR: ~/code/justin.vc
</span></span></span><span class="line"><span class="cl"><span class="s">                   #+HUGO_SECTION: ./posts
</span></span></span><span class="line"><span class="cl"><span class="s">                   #+HUGO_AUTO_SET_LASTMOD: t
</span></span></span><span class="line"><span class="cl"><span class="s">                   #+TITLE: ${title}
</span></span></span><span class="line"><span class="cl"><span class="s">                   #+DATE: %U
</span></span></span><span class="line"><span class="cl"><span class="s">                   #+HUGO_TAGS: article
</span></span></span><span class="line"><span class="cl"><span class="s">                   #+HUGO_DRAFT: true\n&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">         <span class="nb">:immediate-finish</span> <span class="no">t</span>
</span></span><span class="line"><span class="cl">         <span class="nb">:unnarrowed</span> <span class="no">t</span><span class="p">)))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>If you&rsquo;re familiar with or skimmed the earlier linked site, this is simply
borrowing Jethro Kuan&rsquo;s capture templates, -but- adding the necessary headers to
utilize ox-hugo. <a href="#org-coderef--ed0192-21">article</a> is where it starts, as I primarily intend to export
&ldquo;articles&rdquo; as my hugo pages.</p>
<p><code>HUGO_BASE_DIR</code> - So, this is where you put your hugo site. In this case, it&rsquo;s a
folder for my website, <a href="https://justin.vc">justin.vc</a>. If you&rsquo;re new to hugo, you can download hugo
and create a new site in a folder of your choosing with <code>hugo new site /path/to/site</code>, then simply choose said folder in your template.</p>
<p><code>HUGO_SECTION</code> - This is a bit self-explanatory, it&rsquo;s just the section where your
posts will go. In essence, ending up in somewhere such as <code>justin.vc/posts/blah</code>
on the web, and in <code>justin.vc/content/posts/blah.md</code> file-wise.</p>
<p>These are the two mandatory headers, there&rsquo;s some clashes between naming in
Jethro&rsquo;s examples, e.g. created -&gt; DATE, but I figure it <span class="underline">probably</span> doesn&rsquo;t matter,
since the things in main/references don&rsquo;t go to hugo.</p>
<h2 id="workflow">Workflow</h2>
<p>In effect, after you&rsquo;ve got the template done, you&rsquo;re pretty much good to
go. You can run <code>org-hugo-export-to-md</code> and it&rsquo;ll automagically create a
markdown copy of your post in the appropriate place.</p>
<p>I&rsquo;m not an expert, of course, but here&rsquo;s some tips I noticed and some dumb
things I wasted time on.</p>
<ol>
<li>If you notice above, there&rsquo;s <code>HUGO_DRAFT</code>, make sure to mark that as false
(or get rid of it entirely if need be) when ready to publish. Otherwise
hugo tends not to build things unless you explicitly tell it to.</li>
<li>ox-hugo knows how to take care of images magically, for single-post org
files you simply put them in an appropriate spot (I have them in my
<code>~/.org/roam/articles/static</code> folder, to keep them aligned with my posts)
and ox-hugo will move them to <code>-your code folder-/static/picture.png</code></li>
<li>You can automatically export on save by adding an appropriate footer to
the bottom.</li>
</ol>
<figure>
    <img loading="lazy" src="/images/hugofooter.png"
         alt="Footnotes in org-mode, showing how to auto-save using comment/evals"/> 
</figure>

<p><a href="https://ox-hugo.scripter.co/doc/auto-export-on-saving/">https://ox-hugo.scripter.co/doc/auto-export-on-saving/</a></p>
<p>That&rsquo;s pretty much it! Whenver I want to write an article I just call
<code>org-roam-node-find</code>, type in the file name I want, change the title, add
tags, and poof.</p>
<h2 id="tips">Tips</h2>
<ol>
<li>Theming is really easy! I really, really, really loathe javascript and
even I found it simple to mess with. I personally like <a href="https://reorx.github.io/hugo-PaperModX/">PaperModX</a>, a fork
of PaperMod that feels a bit nicer.</li>
<li>There&rsquo;s nothing stopping you from doing other .org files. You simply
change the appropriate headers. For example, my
blog roll link is simply an export of my <a href="https://github.com/remyhonig/elfeed-org">elfeed-org</a> file that I use for
my RSS feed.</li>
<li>I know I mentioned this is geared towards individual org-notes, but I
believe there&rsquo;s nothing stopping from mixing and matching! I plan on
using monolithic org files for certain topics, such as conferences or
chains of tutorials.</li>
<li>This is more of an org-tip, but be aware that you can add alt-text to
your images with <code>#+ATTR_HTML :alt This is text</code> above an image. I think it
helps with SEO, but also it&rsquo;s useful for those who are hard-of-seeing.</li>
<li>You&rsquo;re using org-mode, make use of code blocks! Think of all the neat tutorials you could write
about <a href="https://en.wikipedia.org/wiki/Literate_programming">literate programming</a>.</li>
</ol>
<h2 id="caveats">Caveats</h2>
<p>Of course, this all doesn&rsquo;t come for free. As ox-hugo uses a parser to move
files into markdown, there are a couple features that are a bit, finnicky, as
one would say.</p>
<p>The main issue I noticed is shortcodes, there are a lot of in-built shortcodes that
work just fine, but once you get into custom ones, that&rsquo;s where you run into
issues.</p>
<h3 id="example-sidenote-shortcode">Example: Sidenote Shortcode</h3>
<p>For example, to <span class="sidenote">
<label class="sidenote-label" for="f2">implement sidenotes</label>
<input class="sidenote-checkbox" type="checkbox" id="f2"></input>
<span class="sidenote-content
sidenote-right">  Such as this. It gets finnicky around ,&rsquo;s since those are used to seperate the arguments. But it&rsquo;s still pretty nifty. I -think- you can also do LaTeX in this. Thanks to <a href="https://danilafe.com/blog/sidenotes">Danilafe&rsquo;s blog</a> for figuring this out in pure CSS. I tried to do it with javascript but hugo didn&rsquo;t like it. </span>
</span>
I had to make an org-mode macro, and it requires everytime I want to make one,
to use syntax such as:</p>
<p><code>{{{sidenote(f2 &quot;This is inline.&quot; &quot;Hello!&quot;)}}}</code></p>
<p>You could see that getting a bit distracting. Thankfully, you can make macros at
the global level. I had to google a bit, since it doesn&rsquo;t seem to come up
quickly, but it&rsquo;s about as simple as setting a org-macro, then creating a
snippet.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;sidenote&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">label</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;sidenote-label&#34;</span> <span class="na">for</span><span class="o">=</span><span class="s">&#34;{{ .Get 0 }}&#34;</span><span class="p">&gt;</span>{{ .Get 1 }}<span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">input</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;sidenote-checkbox&#34;</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;checkbox&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;{{ .Get 0 }}&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">input</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;sidenote-content sidenote-right&#34;</span><span class="p">&gt;</span>{{ .Inner }}<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>The <span class="sidenote">
<label class="sidenote-label" for="f3">html for the sidenotes.</label>
<input class="sidenote-checkbox" type="checkbox" id="f3"></input>
<span class="sidenote-content
sidenote-right">  Note that the html is 0 indexed, and the macro in org is 1 indexed. This threw me off for a bit. </span>
</span></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-elisp" data-lang="elisp"><span class="line"><span class="cl"><span class="p">(</span><span class="nb">setq</span> <span class="nv">org-export-global-macros</span> <span class="o">&#39;</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="s">&#34;sidenote&#34;</span> <span class="o">.</span> <span class="s">&#34;@@html:{ {% sidenote $1 $2 %} } $3 { {% /sidenote %} }@@&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">))</span>
</span></span></code></pre></div><p>This is how you would add a macro at the global level. <strong><strong>Replace the spacing in
the brackets to the respective {{}}.</strong></strong> Hugo didn&rsquo;t like me replicating shortcode
for example purposes.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl"># -*- mode: snippet -*-
</span></span><span class="line"><span class="cl"># name: sidenote creation
</span></span><span class="line"><span class="cl"># uuid: oxhugo_sidenote
</span></span><span class="line"><span class="cl"># key: snote
</span></span><span class="line"><span class="cl"># --
</span></span><span class="line"><span class="cl">{{{sidenote(${1:label}, ${2:inline text}, ${3:sidetext})}}}
</span></span></code></pre></div><p>This is a snippet for making sidenotes easier.</p>
<h2 id="conclusions">Conclusions</h2>
<p>There are probably some quality of life things I could add such as adding an
interactive step to the capture template for tags, and adding in the footer
automatically, but I figure I&rsquo;ll hone my process as I go along, and I&rsquo;ll try to
update this post when it comes to it, or write a new one if necessary.</p>
<p>Do you do something similar, or have any input? Feel free to contact me and let
me know, as I said, I&rsquo;m just kind of bumbling through this. But even writing this article was a piece of
cake, so I have good feelings about it and hope to hone this through several
iterations of work.</p>
<hr>
<p><strong>TLDR;</strong>   make sure capture template is set correctly -&gt; <code>org-roam-node-find</code> -&gt; enter file name -&gt; add tags / change title to more
&ldquo;readable&rdquo;  -&gt; Get writing! -&gt; <code>org-hugo-export-to-md</code></p>
<p>Post-Update Notes:</p>
<ul>
<li><a href="https://scripter.co/sidenotes-using-only-css/">https://scripter.co/sidenotes-using-only-css/</a>, read this after I wrote my own.
Also a good way of making sidenotes and how to use ox-hugo. (This is ox-hugo&rsquo;s
creator)</li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Hello! This is a footnote. Yay. In other topics I&rsquo;ll probably try to limit
footnotes to actual citations with <code>citar</code> or the like.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
